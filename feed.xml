<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://mafulong.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mafulong.github.io/" rel="alternate" type="text/html" /><updated>2025-04-23T17:19:11+08:00</updated><id>https://mafulong.github.io/feed.xml</id><title type="html">Fulongのblog</title><subtitle>Fulongのblog</subtitle><author><name>Fulong Ma</name></author><entry><title type="html">pdf不打印加签名</title><link href="https://mafulong.github.io/2025/04/17/pdf%E4%B8%8D%E6%89%93%E5%8D%B0%E5%8A%A0%E7%AD%BE%E5%90%8D/" rel="alternate" type="text/html" title="pdf不打印加签名" /><published>2025-04-17T00:00:00+08:00</published><updated>2025-04-17T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/04/17/pdf%E4%B8%8D%E6%89%93%E5%8D%B0%E5%8A%A0%E7%AD%BE%E5%90%8D</id><content type="html" xml:base="https://mafulong.github.io/2025/04/17/pdf%E4%B8%8D%E6%89%93%E5%8D%B0%E5%8A%A0%E7%AD%BE%E5%90%8D/">&lt;h2 id=&quot;pdf不打印加签名&quot;&gt;pdf不打印加签名&lt;/h2&gt;

&lt;p&gt;macOS 自带的 &lt;strong&gt;Preview（预览）&lt;/strong&gt; 应用完全可以在 PDF 上“写字”（打字或手写），并且&lt;strong&gt;可以保存到原 PDF 文件中&lt;/strong&gt;。以下是具体步骤：&lt;/p&gt;

&lt;h3 id=&quot;在-pdf-上写字并保存使用-preview&quot;&gt;在 PDF 上写字并保存（使用 Preview）&lt;/h3&gt;

&lt;h4 id=&quot;-方法一输入文本打字&quot;&gt;✅ 方法一：输入文本（打字）&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;用 &lt;strong&gt;Preview&lt;/strong&gt; 打开 PDF 文件&lt;/li&gt;
  &lt;li&gt;点击顶部菜单栏的 &lt;strong&gt;工具 &amp;gt; 注释 &amp;gt; 文字&lt;/strong&gt;（或点击工具栏上的“T”图标）&lt;/li&gt;
  &lt;li&gt;出现一个文本框，输入你想写的文字&lt;/li&gt;
  &lt;li&gt;拖动文本框移动位置，点击右上角“&lt;strong&gt;Aa&lt;/strong&gt;”可更改字体和大小&lt;/li&gt;
  &lt;li&gt;文件 &amp;gt; 存储，或直接 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cmd + S&lt;/code&gt; 保存修改&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;-方法二手写画签名或写字&quot;&gt;✅ 方法二：手写（画签名或写字）&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;点击工具栏的“&lt;strong&gt;记号工具栏&lt;/strong&gt;”图标（一个铅笔尖的图标）&lt;/li&gt;
  &lt;li&gt;点击“&lt;strong&gt;签名图标&lt;/strong&gt;”（或者使用“绘图”工具）&lt;/li&gt;
  &lt;li&gt;可用触控板、鼠标或 iPad（使用 Sidecar）进行手写输入&lt;/li&gt;
  &lt;li&gt;放置在合适位置，保存即可&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Fulong Ma</name></author><category term="Tools" /><category term="Tools" /><summary type="html">pdf不打印加签名</summary></entry><entry><title type="html">QQ音乐文件下载转mp3</title><link href="https://mafulong.github.io/2025/04/08/QQ%E9%9F%B3%E4%B9%90%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E8%BD%ACmp3/" rel="alternate" type="text/html" title="QQ音乐文件下载转mp3" /><published>2025-04-08T00:00:00+08:00</published><updated>2025-04-08T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/04/08/QQ%E9%9F%B3%E4%B9%90%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E8%BD%ACmp3</id><content type="html" xml:base="https://mafulong.github.io/2025/04/08/QQ%E9%9F%B3%E4%B9%90%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E8%BD%ACmp3/">&lt;h2 id=&quot;qq音乐文件下载转mp3&quot;&gt;QQ音乐文件下载转mp3&lt;/h2&gt;

&lt;p&gt;需要使用旧版QQ音乐，这样下载的加密文件flmac or ogg文件才可以解密变成flac/wac/mp3等可以在一般音乐软件播放的格式，其中mp3品质最低，建议flac格式。&lt;/p&gt;

&lt;h3 id=&quot;旧版qq音乐&quot;&gt;旧版QQ音乐:&lt;/h3&gt;

&lt;p&gt;mac版本，已经在我的百度网盘了。&lt;/p&gt;

&lt;p&gt;通过网盘分享的文件：QQMusicMac_Mgr.dmg
链接: https://pan.baidu.com/s/1FRRQm5_OoTCJqsMO9u9_LQ 提取码: wz9p&lt;/p&gt;

&lt;p&gt;登录后进行下载。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;会员歌曲是加密的，单独一个目录. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Users/mafulong/Library/Containers/com.tencent.QQMusicMac/Data/Library/Application Support/QQMusicMac/iQmc&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;免费歌曲是mp3格式。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; /Users/mafulong/Music/QQ音乐&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;音乐文件格式转换&quot;&gt;音乐文件格式转换&lt;/h3&gt;

&lt;p&gt;参考: https://www.bilibili.com/opus/902846904983879720?jump_opus=1&lt;/p&gt;

&lt;p&gt;使用网址上传加密的，并下载解密后的。 https://jiesuo.ink/&lt;/p&gt;</content><author><name>Fulong Ma</name></author><category term="Tools" /><category term="Tools" /><summary type="html">QQ音乐文件下载转mp3</summary></entry><entry><title type="html">套利</title><link href="https://mafulong.github.io/2025/04/02/%E5%A5%97%E5%88%A9/" rel="alternate" type="text/html" title="套利" /><published>2025-04-02T00:00:00+08:00</published><updated>2025-04-02T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/04/02/%E5%A5%97%E5%88%A9</id><content type="html" xml:base="https://mafulong.github.io/2025/04/02/%E5%A5%97%E5%88%A9/">&lt;h2 id=&quot;套利&quot;&gt;套利&lt;/h2&gt;

&lt;p&gt;折价套利原理，是基金处于折价状态，场内价格低，净值高。此时如果我们持有此基金，那么就可以在尾盘，&lt;strong&gt;按照净值赎回，同时买入等额的场内基金，实现了“高卖低买”的套利操作，赚取差价。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;折价&lt;/strong&gt;套利仅适合长期持有的基金做底仓，不适合新买入的基金做底仓，而且只能做一次，不适合频繁操作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;溢价套利相比折价套利，手续费更低，耗时更短，资金利用率更高，最重要的是风险也最低。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;溢价套利&quot;&gt;溢价套利&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;溢价套利的理论知识点很简单，就是当基金场内价格高于净值时，就可以通过卖出场内份额，同时在场内申购等值的基金份额（场内申购的填写的是申购的金额），&lt;/strong&gt;这样就完成了一轮溢价套利操作&lt;/p&gt;

&lt;p&gt;溢价套利的操作时间一般是在两点半后，跟据基金的估值和场内成交价格，计算出基金的溢价率，判断基金是否出现溢价套利机会，也可以直接查看某微某号“小鱼的储钱罐”，会直接显示溢价率，还可以开启提醒，避免错失机会&lt;/p&gt;

&lt;p&gt;理论上当溢价率 - 成本率 &amp;gt; 0%时，就有溢价套利的机会，但是因为估值会有误差，保守的套利策略是当溢价率大于0.5%时，才进行溢价套利操作，这样可以大大增加套利的成功率，减少吃面的可能。当然这也不是一条死规则，我们可以灵活观察基金的历史估值误差率，如果误差率小的，我们就可以降低溢价率的要求，例如某些指数LOF。&lt;/p&gt;

&lt;p&gt;单次溢价套利的成本率大约是0.16%（申购费一折0.15%+基金卖出佣金万分之一），不同的券商可能会有差别&lt;/p&gt;

&lt;h4 id=&quot;无底仓&quot;&gt;无底仓&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;溢价套利的操作步骤（无底仓）：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、T日你发现基金场内价格出现溢价，你经过深思熟虑后，在下午3点前通过场内申购了该基金（场内申购填写的是申购金额，而不是份额）。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、T+2日，申购的基金份额到账后，在场内卖出到账的基金份额。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3、操作完上面两步一轮套利就完成了，但是你一定要知道，你申购的基金是T+2日到账，那你无底仓套利就必须承受T+1日的波动和T+2日开盘时的波动。你也一定要有自己独立的思考，这并不是一定会成功的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4、无底仓套利，还可能会遇到踩踏事件，这就要求你必须掌握跌停逃跑秘籍，以备不时之需。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;综上，我们长期套利最多的肯定是有底仓套利，无底仓套利只是偶尔打打游击。&lt;/p&gt;

&lt;h4 id=&quot;有底仓&quot;&gt;有底仓&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;溢价套利的操作步骤（有底仓）：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、场内卖出基金份额，钱实时到账。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、场内申购同等的基金份额，一定要在下午3点前提交申购，场内申购填写的是申购金额，而不是份额。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3、晚上查看基金净值，计算此次套利收益，有自助记录的神器帮你。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4、T+1日晚上清算后基金会到达场内账户，T+2日就可以卖出循环套利（如果还有套利机会）。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;基金套利关键时间点&quot;&gt;基金套利关键时间点&lt;/h3&gt;

&lt;p&gt;要想学会基金套利，必须清楚以下三个时间点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;基金持仓股收盘时间&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;基金净值公布时间&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;基金成交到账时间&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;1-基金持仓股收盘时间&quot;&gt;1. 基金持仓股收盘时间&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;A股基金&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;交易日收盘前（下午3点）场内申购，成交净值按当天（T+0）股票收盘价计算，相当于当日收盘价买入一揽子股票。&lt;/li&gt;
      &lt;li&gt;例如：2月17日下午3点前申购万家优选（161903），成交净值按17日持仓股票收盘价计算，相当于尾盘买入这些股票。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;美股基金&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;交易日收盘前（下午3点）场内申购，成交净值按次日（T+1）美股收盘价计算，相当于次日美股收盘价买入股票。&lt;/li&gt;
      &lt;li&gt;例如：2月17日下午3点前申购中国互联（164906），成交净值按18日美股阿里巴巴、京东、拼多多等收盘价计算。&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt;：申购美股基金时，因不知次日收盘价，成交价格始终未知。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-基金净值公布时间&quot;&gt;2. 基金净值公布时间&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;A股基金&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;下午3点前（T+0）申购，净值当晚公布，此时可查看成交价格，但尚未成交。&lt;/li&gt;
      &lt;li&gt;例如：2月17日下午3点前申购万家优选（161903），成交净值在17日晚上公布。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;美股基金&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;交易日收盘前（T+0）申购，净值在次日（T+1）公布。&lt;/li&gt;
      &lt;li&gt;例如：2月17日下午3点前申购中国互联（164906），成交净值在2月18日公布。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-基金成交到账时间&quot;&gt;3. 基金成交到账时间&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;A股基金&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;T+0日净值公布后，T+1日清算成交，T+2日开盘前到账。&lt;/li&gt;
      &lt;li&gt;例如：2月17日下午3点前申购万家优选（161903），净值17日晚上公布，18日清算，19日开盘前到账。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;美股基金&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;T+1日净值公布后，T+2日清算成交，T+3日开盘前到账。&lt;/li&gt;
      &lt;li&gt;例如：2月17日下午3点前申购中国互联（164906），净值18日公布，19日清算，20日开盘前到账。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;重要提醒&quot;&gt;重要提醒&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;申购A股基金，成交价已知。&lt;/li&gt;
  &lt;li&gt;申购美股基金，成交价未知，需谨慎。&lt;/li&gt;
  &lt;li&gt;牢记基金套利的三个关键时间点，避免不必要的损失！&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lof&quot;&gt;LOF&lt;/h2&gt;

&lt;p&gt;https://xueqiu.com/1095267696/138669898?md5__1038=n4%2Bx9DRDBDgDyDGxQqb4Bq8otD%3Dbqeyb7AID&lt;/p&gt;

&lt;p&gt;1，LOF基金的主要特点就是，可以在场内以实时价格进行买卖，又能够在场内和场外通过净值申购和赎回。&lt;/p&gt;

&lt;p&gt;不好理解，换一种说法，LOF可以在场内交易，也能在场内和场外申赎。（后文所述全部为场内申赎，场外申赎与本文无关，暂时不再提及）&lt;/p&gt;

&lt;p&gt;场内交易用的是实时价格，交易价格随时变化，和买卖股票完全一样。场内申赎用的是每天收盘后的净值，每天只有一个。&lt;/p&gt;

&lt;p&gt;2，同一个基金，两个地方交易，价格必然不完全相同。后文用交易价格和净值（申赎净值）表示两个不同市场。&lt;/p&gt;

&lt;p&gt;3，交易价格&amp;gt;净值，称为溢价；交易价格&amp;lt;净值，称为折价。&lt;/p&gt;

&lt;p&gt;溢价和折价都是用当前价格和净值进行比较得来的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;** 注意这里所说的净值是实时净值，也就是估算净值，越是接近收盘时间，估算净值就越接近真实净值。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（上面这句话非常重要，一定要真正理解才行，这是套利成功的最关键因素）&lt;/p&gt;

&lt;p&gt;真实净值是每天收盘后基金公司才发布的，是准确的，每天只有一个。&lt;/p&gt;

&lt;p&gt;4，同一个基金，从价格低的地方买(申购)来，然后到价格高的地方卖(赎回)，就叫套利，中间产生的差价就是套利收益。&lt;/p&gt;

&lt;p&gt;5，溢价套利：卖出-申购（先简单知道就好，后面会详细介绍操作过程以及注意事项）（申购-卖出会怎么样，其实也可以，为了不搞的太复杂，先不说了）&lt;/p&gt;

&lt;p&gt;当交易价格&amp;gt;净值时，先按交易价格卖出，再按净值申购，，中间的差价就是收益。&lt;/p&gt;

&lt;p&gt;折价套利：赎回-买入&lt;/p&gt;

&lt;p&gt;交易价格&amp;lt;净值时，先按按净值赎回，然后按交易价格买入&lt;/p&gt;

&lt;h2 id=&quot;套利选择&quot;&gt;套利选择&lt;/h2&gt;

&lt;p&gt;华宝油气 162411&lt;/p&gt;

&lt;p&gt;中国互联 164906&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;天弘添利&lt;/li&gt;
  &lt;li&gt;164206天弘添利，161010富国天丰，还有可转债ETF&lt;/li&gt;
  &lt;li&gt;160140？&lt;/li&gt;
  &lt;li&gt;164206&lt;/li&gt;
  &lt;li&gt;招商双债折价&lt;/li&gt;
  &lt;li&gt;ETF基本上没有套利空间，而且起步都比较高100万份，300万份等等，少的好像50万份也有&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Fulong Ma</name></author><category term="Finance" /><category term="Finance" /><summary type="html">套利</summary></entry><entry><title type="html">Java Idea工具</title><link href="https://mafulong.github.io/2025/04/01/Java-Idea%E5%B7%A5%E5%85%B7/" rel="alternate" type="text/html" title="Java Idea工具" /><published>2025-04-01T00:00:00+08:00</published><updated>2025-04-01T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/04/01/Java%20Idea%E5%B7%A5%E5%85%B7</id><content type="html" xml:base="https://mafulong.github.io/2025/04/01/Java-Idea%E5%B7%A5%E5%85%B7/">&lt;h2 id=&quot;java-idea工具&quot;&gt;Java Idea工具&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://javabetter.cn/ide/shenji-chajian-10.html#free-mybatis-plugin&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;arthas-idea&quot;&gt;&lt;a href=&quot;https://javabetter.cn/ide/shenji-chajian-10.html#arthas-idea&quot;&gt;arthas idea&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Arthas 应该大家都很熟悉了，阿里开源的一款强大的 java 在线诊断工具。&lt;/p&gt;

&lt;p&gt;但如果每次都要你输入一长串命令的话，相信你也会很崩溃，尤其是很多时候我还记忆模糊，很多记不住。这款插件刚好解决了我这个烦恼，极大地提高了生产力&lt;/p&gt;

&lt;h2 id=&quot;free-mybatis-plugin&quot;&gt;&lt;a href=&quot;https://javabetter.cn/ide/shenji-chajian-10.html#free-mybatis-plugin&quot;&gt;Free Mybatis plugin&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Mybatis 基本上是目前最主流的 ORM 框架了，相比于 hibernate 更加灵活，性能也更好。所以我们一般在 Spring Boot 项目中都会写对应的 mapper.java 和 mapper.xml。&lt;/p&gt;

&lt;h2 id=&quot;visualgc&quot;&gt;&lt;a href=&quot;https://javabetter.cn/ide/shenji-chajian-10.html#visualgc&quot;&gt;VisualGC&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;这里给大家推荐一个 JVM 堆栈可视化工具，可以和 Intellij IDEA 深度集成——VisualGC。&lt;/p&gt;

&lt;h2 id=&quot;checkstyle-idea&quot;&gt;&lt;a href=&quot;https://javabetter.cn/ide/shenji-chajian-10.html#checkstyle-idea&quot;&gt;CheckStyle-IDEA&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;如果你比较追求代码规范的话，可以安装这个插件，它会提醒你注意无用导入、注释、语法错误❎、代码冗余等等。&lt;/p&gt;

&lt;h2 id=&quot;gittoolbox&quot;&gt;&lt;a href=&quot;https://javabetter.cn/ide/shenji-chajian-10.html#gittoolbox&quot;&gt;GitToolBox&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;如果你经常使用 Git 提交代码的话，这款插件就非常的爽。&lt;/p&gt;

&lt;h2 id=&quot;maven-helper&quot;&gt;&lt;a href=&quot;https://javabetter.cn/ide/shenji-chajian-10.html#maven-helper&quot;&gt;Maven Helper&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;这插件几乎人手一个了吧，Java 后端开发必备啊。&lt;/p&gt;

&lt;h2 id=&quot;jenv&quot;&gt;Jenv&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Jenv&lt;/strong&gt; 是一个用于管理多个 Java 版本的工具，它类似于 Python 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv&lt;/code&gt;。Jenv 可以让你在同一台机器上管理多个版本的 JDK，并方便地在不同的 Java 项目之间切换 Java 版本。&lt;/p&gt;</content><author><name>Fulong Ma</name></author><category term="Java" /><category term="Java" /><summary type="html">Java Idea工具</summary></entry><entry><title type="html">Java QA</title><link href="https://mafulong.github.io/2025/04/01/Java-QA/" rel="alternate" type="text/html" title="Java QA" /><published>2025-04-01T00:00:00+08:00</published><updated>2025-04-01T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/04/01/Java%20QA</id><content type="html" xml:base="https://mafulong.github.io/2025/04/01/Java-QA/">&lt;h2 id=&quot;java-qa&quot;&gt;Java QA&lt;/h2&gt;

&lt;h3 id=&quot;为什么说-java-语言编译与解释并存&quot;&gt;&lt;strong&gt;为什么说 Java 语言“编译与解释并存”？&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;这是因为 Java 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.class&lt;/code&gt; 文件），这种字节码必须由 Java 解释器来解释执行。&lt;/p&gt;

&lt;h3 id=&quot;oracle-jdk-vs-openjdk&quot;&gt;&lt;a href=&quot;https://javaguide.cn/java/basis/java-basic-questions-01.html#oracle-jdk-vs-openjdk&quot;&gt;Oracle JDK vs OpenJDK&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;既然 Oracle JDK 这么好，那为什么还要有 OpenJDK？&lt;/p&gt;

&lt;p&gt;答：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;OpenJDK 是开源的，开源意味着你可以对它根据你自己的需要进行修改、优化，比如 Alibaba 基于 OpenJDK 开发了 Dragonwell8：https://github.com/alibaba/dragonwell8&lt;/li&gt;
  &lt;li&gt;OpenJDK 是商业免费的（这也是为什么通过 yum 包管理器上默认安装的 JDK 是 OpenJDK 而不是 Oracle JDK）。虽然 Oracle JDK 也是商业免费（比如 JDK 8），但并不是所有版本都是免费的。&lt;/li&gt;
  &lt;li&gt;OpenJDK 更新频率更快。Oracle JDK 一般是每 6 个月发布一个新版本，而 OpenJDK 一般是每 3 个月发布一个新版本。（现在你知道为啥 Oracle JDK 更稳定了吧，先在 OpenJDK 试试水，把大部分问题都解决掉了才在 Oracle JDK 上发布）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Oracle JDK 和 OpenJDK 如何选择？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;建议选择 OpenJDK 或者基于 OpenJDK 的发行版，比如 AWS 的 Amazon Corretto，阿里巴巴的 Alibaba Dragonwell。&lt;/p&gt;

&lt;h3 id=&quot;虚拟线程-协程&quot;&gt;虚拟线程 协程&lt;/h3&gt;

&lt;p&gt;https://mp.weixin.qq.com/s/qMTE-fOovstQg5Q9vIFIWg&lt;/p&gt;

&lt;p&gt;https://javaguide.cn/java/concurrent/virtual-thread.html#%E8%99%9A%E6%8B%9F%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%B9%B3%E5%8F%B0%E7%BA%BF%E7%A8%8B%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94&lt;/p&gt;

&lt;p&gt;jdk21类似go实现了有栈协程，但注意java的依赖载体线程，比如synchronized 就是用了载体线程，因此会让载体线程也进行阻塞。不能很好的兼容。&lt;/p&gt;

&lt;h3 id=&quot;java-使用的线程调度方式&quot;&gt;Java 使用的线程调度方式&lt;/h3&gt;

&lt;p&gt;操作系统主要通过两种线程调度方式来管理多线程的执行：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;抢占式调度（Preemptive Scheduling）&lt;/strong&gt;：操作系统决定何时暂停当前正在运行的线程，并切换到另一个线程执行。这种切换通常是由系统时钟中断（时间片轮转）或其他高优先级事件（如 I/O 操作完成）触发的。这种方式存在上下文切换开销，但公平性和 CPU 资源利用率较好，不易阻塞。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;协同式调度（Cooperative Scheduling）&lt;/strong&gt;：线程执行完毕后，主动通知系统切换到另一个线程。这种方式可以减少上下文切换带来的性能开销，但公平性较差，容易阻塞。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java 使用的线程调度是抢占式的。也就是说，JVM 本身不负责线程的调度，而是将线程的调度委托给操作系统。操作系统通常会基于线程优先级和时间片来调度线程的执行，高优先级的线程通常获得 CPU 时间片的机会更多。&lt;/p&gt;

&lt;p&gt;###&lt;/p&gt;

&lt;h3 id=&quot;单核-cpu-上运行多个线程效率一定会高吗&quot;&gt;&lt;a href=&quot;https://javaguide.cn/java/concurrent/java-concurrent-questions-01.html#⭐️单核-cpu-上运行多个线程效率一定会高吗&quot;&gt;单核 CPU 上运行多个线程效率一定会高吗？&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;单核 CPU 同时运行多个线程的效率是否会高，取决于线程的类型和任务的性质。一般来说，有两种类型的线程：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;CPU 密集型&lt;/strong&gt;：CPU 密集型的线程主要进行计算和逻辑处理，需要占用大量的 CPU 资源。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IO 密集型&lt;/strong&gt;：IO 密集型的线程主要进行输入输出操作，如读写文件、网络通信等，需要等待 IO 设备的响应，而不占用太多的 CPU 资源。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在单核 CPU 上，同一时刻只能有一个线程在运行，其他线程需要等待 CPU 的时间片分配。如果线程是 CPU 密集型的，那么多个线程同时运行会导致频繁的线程切换，增加了系统的开销，降低了效率。如果线程是 IO 密集型的，那么多个线程同时运行可以利用 CPU 在等待 IO 时的空闲时间，提高了效率。&lt;/p&gt;

&lt;p&gt;因此，对于单核 CPU 来说，如果任务是 CPU 密集型的，那么开很多线程会影响效率；如果任务是 IO 密集型的，那么开很多线程会提高效率。当然，这里的“很多”也要适度，不能超过系统能够承受的上限。&lt;/p&gt;

&lt;h3 id=&quot;如何检测死锁&quot;&gt;&lt;a href=&quot;#如何检测死锁&quot;&gt;如何检测死锁？&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmap&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jstack&lt;/code&gt;等命令查看 JVM 线程栈和堆内存的情况。如果有死锁，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jstack&lt;/code&gt; 的输出中通常会有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Found one Java-level deadlock:&lt;/code&gt;的字样，后面会跟着死锁相关的线程信息。另外，实际项目中还可以搭配使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;top&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;df&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free&lt;/code&gt;等命令查看操作系统的基本情况，出现死锁可能会导致 CPU、内存等资源消耗过高。&lt;/li&gt;
  &lt;li&gt;采用 VisualVM、JConsole 等工具进行排查。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里以 JConsole 工具为例进行演示。&lt;/p&gt;

&lt;h3 id=&quot;synchronized-底层原理了解吗&quot;&gt;&lt;a href=&quot;https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#⭐️synchronized-底层原理了解吗&quot;&gt;synchronized 底层原理了解吗？&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;synchronized 关键字底层原理属于 JVM 层面的东西。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt; 同步语句块的实现使用的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monitorenter&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monitorexit&lt;/code&gt; 指令，其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monitorenter&lt;/code&gt; 指令指向同步代码块的开始位置，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monitorexit&lt;/code&gt; 指令则指明同步代码块的结束位置。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt; 修饰的方法并没有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monitorenter&lt;/code&gt; 指令和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monitorexit&lt;/code&gt; 指令，取而代之的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACC_SYNCHRONIZED&lt;/code&gt; 标识，该标识指明了该方法是一个同步方法。&lt;/p&gt;

&lt;p&gt;不过，两者的本质都是对对象监视器 monitor 的获取。wait, notify也是基于monitor对象的。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#%E2%AD%90%EF%B8%8Fsynchronized-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E4%BA%86%E8%A7%A3%E5%90%97&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在 Java 6 之后， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt; 引入了大量的优化如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销，这些优化让 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt; 锁的效率提升了很多（JDK18 中，偏向锁已经被彻底废弃，前面已经提到过了）。&lt;/p&gt;

&lt;p&gt;锁主要存在四种状态，依次是：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，他们会随着竞争的激烈而逐渐升级。注意锁可以升级不可降级，这种策略是为了提高获得锁和释放锁的效率。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt; 锁升级是一个比较复杂的过程，面试也很少问到，如果你想要详细了解的话，可以看看这篇文章：&lt;a href=&quot;https://www.cnblogs.com/star95/p/17542850.html&quot;&gt;浅析 synchronized 锁升级的原理与实现&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;synchronized-和-volatile-有什么区别&quot;&gt;&lt;a href=&quot;#⭐️synchronized-和-volatile-有什么区别&quot;&gt;synchronized 和 volatile 有什么区别？&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt; 关键字和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt; 关键字是两个互补的存在，而不是对立的存在！&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt; 关键字是线程同步的轻量级实现，所以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt;性能肯定比&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt;关键字要好 。但是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt; 关键字只能用于变量而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt; 关键字可以修饰方法以及代码块 。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt; 关键字能保证数据的可见性，但不能保证数据的原子性。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt; 关键字两者都能保证。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt;关键字主要用于解决变量在多个线程之间的可见性，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt; 关键字解决的是多个线程之间访问资源的同步性。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Fulong Ma</name></author><category term="Java" /><category term="Java" /><summary type="html">Java QA</summary></entry><entry><title type="html">组合优于继承</title><link href="https://mafulong.github.io/2025/03/23/%E7%BB%84%E5%90%88%E4%BC%98%E4%BA%8E%E7%BB%A7%E6%89%BF/" rel="alternate" type="text/html" title="组合优于继承" /><published>2025-03-23T00:00:00+08:00</published><updated>2025-03-23T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/03/23/%E7%BB%84%E5%90%88%E4%BC%98%E4%BA%8E%E7%BB%A7%E6%89%BF</id><content type="html" xml:base="https://mafulong.github.io/2025/03/23/%E7%BB%84%E5%90%88%E4%BC%98%E4%BA%8E%E7%BB%A7%E6%89%BF/">&lt;h2 id=&quot;组合优于继承&quot;&gt;组合优于继承&lt;/h2&gt;

&lt;p&gt;面向对象设计的过程中， 两个最常用的技巧就是&lt;strong&gt;类继承&lt;/strong&gt;和&lt;strong&gt;对象组合&lt;/strong&gt;，同一个场景下的代码复用，这两个技巧基本上都可以完成。 但是他们有如下的区别：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通过继承实现的代码复用常常是一种&lt;strong&gt;“&lt;a href=&quot;https://zhida.zhihu.com/search?content_id=63013326&amp;amp;content_type=Answer&amp;amp;match_order=1&amp;amp;q=白盒复用&amp;amp;zhida_source=entity&quot;&gt;白盒复用&lt;/a&gt;”&lt;/strong&gt;， 这里的白盒指的是可见性： 对于继承来说，&lt;strong&gt;父类的内部实现对于子类来说是不透明的（实现一个子类时， 你需要了解父类的实现细节， 以此决定是否需要重写某个方法）&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;对象组合实现的代码复用则是一种&lt;strong&gt;“&lt;a href=&quot;https://zhida.zhihu.com/search?content_id=63013326&amp;amp;content_type=Answer&amp;amp;match_order=1&amp;amp;q=黑盒复用&amp;amp;zhida_source=entity&quot;&gt;黑盒复用&lt;/a&gt;”&lt;/strong&gt;“: 对象的内部细节不可见，对象仅仅是以&lt;strong&gt;“黑盒”&lt;/strong&gt;的方式出现（可以通过改变对象引用来改变其行为方式）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;继承inheritance的问题&quot;&gt;&lt;strong&gt;继承（Inheritance）的问题&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;❌ &lt;strong&gt;强耦合&lt;/strong&gt;：子类依赖父类，修改父类影响所有子类。&lt;/li&gt;
  &lt;li&gt;❌ &lt;strong&gt;扩展性差&lt;/strong&gt;：Java &lt;strong&gt;不支持多继承&lt;/strong&gt;，代码僵硬。&lt;/li&gt;
  &lt;li&gt;❌ &lt;strong&gt;违反 Liskov 替换原则（LSP）&lt;/strong&gt;：子类可能改变父类行为，导致不一致。&lt;/li&gt;
  &lt;li&gt;❌ &lt;strong&gt;继承层次过深&lt;/strong&gt;：难以维护，父类变动影响所有子类。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;组合composition的优势&quot;&gt;&lt;strong&gt;组合（Composition）的优势&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;✅ &lt;strong&gt;低耦合&lt;/strong&gt;：各组件独立，修改不影响其他类。&lt;/li&gt;
  &lt;li&gt;✅ &lt;strong&gt;高灵活性&lt;/strong&gt;：可以&lt;strong&gt;在运行时动态改变行为&lt;/strong&gt;。比如动态传入一个新对象，可以运行时改变行为。&lt;/li&gt;
  &lt;li&gt;✅ &lt;strong&gt;代码复用&lt;/strong&gt;：避免继承层次过深，代码更易维护。&lt;/li&gt;
  &lt;li&gt;✅ &lt;strong&gt;遵循开闭原则（OCP）&lt;/strong&gt;：扩展新功能无需修改原有代码。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Fulong Ma</name></author><category term="OOP" /><category term="OOP" /><summary type="html">组合优于继承</summary></entry><entry><title type="html">圆环回原点DP</title><link href="https://mafulong.github.io/2025/03/01/%E5%9C%86%E7%8E%AF%E5%9B%9E%E5%8E%9F%E7%82%B9DP/" rel="alternate" type="text/html" title="圆环回原点DP" /><published>2025-03-01T00:00:00+08:00</published><updated>2025-03-01T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/03/01/%E5%9C%86%E7%8E%AF%E5%9B%9E%E5%8E%9F%E7%82%B9DP</id><content type="html" xml:base="https://mafulong.github.io/2025/03/01/%E5%9C%86%E7%8E%AF%E5%9B%9E%E5%8E%9F%E7%82%B9DP/">&lt;h2 id=&quot;圆环回原点dp&quot;&gt;圆环回原点DP&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/NZPaFsFrTybO3K3s7p7EVg&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;算法：一个环上有10个点,编号为0-9,从0点出发,每步可以顺时针到下一个点,也可以逆时针到上一个点,求:经过n步又回到0点有多少种不同的走法&lt;/p&gt;

&lt;p&gt;举例：&lt;/p&gt;

&lt;p&gt;如果n=1，则从0出发只能到1或者9，不可能回到0，共0种走法 如果n=2，则从0出发有4条路径:0-&amp;gt;1-&amp;gt;2, 0-&amp;gt;1-&amp;gt;0, 0-&amp;gt;9-&amp;gt;8, 0-&amp;gt;9-&amp;gt;0,其中有两条回到了0点，故一共有2种走法&lt;/p&gt;

&lt;p&gt;本题考察的是动态规划。&lt;/p&gt;

&lt;p&gt;如果你之前做过leetcode的70题爬楼梯，则应该比较容易理解：走n步到0的方案数=走n-1步到1的方案数+走n-1步到9的方案数。&lt;/p&gt;

&lt;p&gt;因此，若设dp[i][j]为从0点出发走i步到j点的方案数，则递推式为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/mafulong/mdPic@vv5/v5/202503012359545&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ps:公式之所以取余是因为j-1或j+1可能会超过圆环0~9的范围&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backToOrigin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#点的个数为10
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;#dp[i][j]表示从0出发，走i步到j的方案数
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Fulong Ma</name></author><category term="Offer" /><category term="Offer" /><summary type="html">圆环回原点DP</summary></entry><entry><title type="html">513. 找树左下角的值</title><link href="https://mafulong.github.io/2025/02/11/513.-%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/" rel="alternate" type="text/html" title="513. 找树左下角的值" /><published>2025-02-11T00:00:00+08:00</published><updated>2025-02-11T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/02/11/513.%20%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC</id><content type="html" xml:base="https://mafulong.github.io/2025/02/11/513.-%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/">&lt;h2 id=&quot;title&quot;&gt;title&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/find-bottom-left-tree-value/description/&quot;&gt;problem link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;给定一个二叉树的 &lt;strong&gt;根节点&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;，请找出该二叉树的 &lt;strong&gt;最底层 最左边&lt;/strong&gt; 节点的值。&lt;/p&gt;

&lt;p&gt;假设二叉树中至少有一个节点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/mafulong/mdPic@vv5/v5/202502112041060.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入: root = [2,1,3]
输出: 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/mafulong/mdPic@vv5/v5/202502112041718.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入: [1,2,3,4,null,5,6,null,null,7]
输出: 7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;提示:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;二叉树的节点个数的范围是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1,104]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-231 &amp;lt;= Node.val &amp;lt;= 231 - 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;solution&quot;&gt;solution&lt;/h2&gt;

&lt;p&gt;层次遍历，每次，从右到左。这样最后一个节点就是。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findBottomLeftValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Fulong Ma</name></author><category term="leetcode" /><category term="leetcode" /><summary type="html">title problem link</summary></entry><entry><title type="html">93. 复原 IP 地址</title><link href="https://mafulong.github.io/2025/02/09/93.-%E5%A4%8D%E5%8E%9F-IP-%E5%9C%B0%E5%9D%80/" rel="alternate" type="text/html" title="93. 复原 IP 地址" /><published>2025-02-09T00:00:00+08:00</published><updated>2025-02-09T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/02/09/93.%20%E5%A4%8D%E5%8E%9F%20IP%20%E5%9C%B0%E5%9D%80</id><content type="html" xml:base="https://mafulong.github.io/2025/02/09/93.-%E5%A4%8D%E5%8E%9F-IP-%E5%9C%B0%E5%9D%80/">&lt;h2 id=&quot;title&quot;&gt;title&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/restore-ip-addresses/description/&quot;&gt;problem link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;有效 IP 地址&lt;/strong&gt; 正好由四个整数（每个整数位于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; 到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;255&lt;/code&gt; 之间组成，且不能含有前导 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;），整数之间用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;.&apos;&lt;/code&gt; 分隔。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;例如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;0.1.2.201&quot;&lt;/code&gt; 和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; &quot;192.168.1.1&quot;&lt;/code&gt; 是 &lt;strong&gt;有效&lt;/strong&gt; IP 地址，但是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;0.011.255.245&quot;&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;192.168.1.312&quot;&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;192.168@1.1&quot;&lt;/code&gt; 是 &lt;strong&gt;无效&lt;/strong&gt; IP 地址。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;给定一个只包含数字的字符串 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; ，用以表示一个 IP 地址，返回所有可能的&lt;strong&gt;有效 IP 地址&lt;/strong&gt;，这些地址可以通过在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; 中插入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;.&apos;&lt;/code&gt; 来形成。你 &lt;strong&gt;不能&lt;/strong&gt; 重新排序或删除 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; 中的任何数字。你可以按 &lt;strong&gt;任何&lt;/strong&gt; 顺序返回答案。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入：s = &quot;25525511135&quot;
输出：[&quot;255.255.11.135&quot;,&quot;255.255.111.35&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入：s = &quot;0000&quot;
输出：[&quot;0.0.0.0&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入：s = &quot;101023&quot;
输出：[&quot;1.0.10.23&quot;,&quot;1.0.102.3&quot;,&quot;10.1.0.23&quot;,&quot;10.10.2.3&quot;,&quot;101.0.2.3&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 &amp;lt;= s.length &amp;lt;= 20&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; 仅由数字组成&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;solution&quot;&gt;solution&lt;/h2&gt;

&lt;p&gt;回溯法&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;restoreIpAddresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backtrack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;int_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;backtrack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;backtrack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Fulong Ma</name></author><category term="leetcode" /><category term="leetcode" /><summary type="html">title problem link</summary></entry><entry><title type="html">win11环境配置</title><link href="https://mafulong.github.io/2025/01/01/win11%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/" rel="alternate" type="text/html" title="win11环境配置" /><published>2025-01-01T00:00:00+08:00</published><updated>2025-01-01T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/01/01/win11%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE</id><content type="html" xml:base="https://mafulong.github.io/2025/01/01/win11%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">&lt;h2 id=&quot;win11环境配置&quot;&gt;win11环境配置&lt;/h2&gt;

&lt;h2 id=&quot;winget&quot;&gt;WinGet&lt;/h2&gt;
&lt;p&gt;官方 Windows 软件包管理器&lt;/p&gt;

&lt;p&gt;WinGet 在安装命令之后加上 –rainbow 的参数，会出现🌈进度条&lt;/p&gt;

&lt;h2 id=&quot;scoop&quot;&gt;Scoop&lt;/h2&gt;
&lt;p&gt;Scoop 可通过命令行轻松安装程序，以可移植的方式下载和管理包&lt;/p&gt;

&lt;p&gt;使用以下命令在 powershell 中安装 Scoop：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;先设置安装位置（自行修改）

$env:SCOOP=&apos;D:\Scoop\&apos;
然后执行

Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
irm get.scoop.sh | iex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果出现Invoke-RestMethod: 请求的名称有效，但是找不到请求的类型的数据。，代表网络可能受到限制，需要一定科学手段解决。&lt;/p&gt;

&lt;h2 id=&quot;wsl安装&quot;&gt;wsl安装&lt;/h2&gt;
&lt;p&gt;Linux命令.&lt;/p&gt;

&lt;p&gt;开启wsl&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;terminal&quot;&gt;terminal&lt;/h2&gt;
&lt;p&gt;用powershell, 支持ls等。&lt;/p&gt;

&lt;h2 id=&quot;git&quot;&gt;git&lt;/h2&gt;
&lt;p&gt;安装git&lt;/p&gt;

&lt;p&gt;然后git配置 https://mafulong.eu.org/2018/07/01/git%E7%9A%84%E9%85%8D%E7%BD%AE/#%E6%A3%80%E9%AA%8C%E6%98%AF%E5%90%A6%E9%93%BE%E6%8E%A5%E4%B8%8A-github&lt;/p&gt;

&lt;h2 id=&quot;vscode&quot;&gt;vscode&lt;/h2&gt;
&lt;p&gt;安装vscode. https://code.visualstudio.com/docs/?dv=win64user&lt;/p&gt;

&lt;h2 id=&quot;powertoys&quot;&gt;PowerToys&lt;/h2&gt;
&lt;p&gt;微软官方工具集&lt;/p&gt;

&lt;p&gt;常用功能：&lt;/p&gt;

&lt;p&gt;置顶窗口&lt;/p&gt;

&lt;p&gt;图像大小调整器&lt;/p&gt;

&lt;p&gt;查找鼠标位置&lt;/p&gt;

&lt;p&gt;唤醒（保持电脑唤醒状态）&lt;/p&gt;

&lt;p&gt;环境变量（图形化编辑）&lt;/p&gt;

&lt;p&gt;注册表预览&lt;/p&gt;

&lt;p&gt;Hosts 编辑&lt;/p&gt;

&lt;p&gt;PowerRename&lt;/p&gt;

&lt;p&gt;PowerToys Run&lt;/p&gt;

&lt;p&gt;搜索应用程序、文件夹或文件&lt;/p&gt;

&lt;p&gt;搜索运行的进程（以前称为Window Walker）&lt;/p&gt;

&lt;p&gt;具有键盘快捷方式的可单击按钮（如以管理员身份打开或打开包含文件夹）&lt;/p&gt;

&lt;p&gt;使用 &amp;gt;调用 Shell 插件（例如，&amp;gt; Shell:startup 将打开Windows 启动文件夹）&lt;/p&gt;

&lt;p&gt;使用计算器执行简单计算&lt;/p&gt;</content><author><name>Fulong Ma</name></author><category term="Tools" /><category term="Tools" /><summary type="html">win11环境配置</summary></entry></feed>