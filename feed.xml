<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://mafulong.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mafulong.github.io/" rel="alternate" type="text/html" /><updated>2025-09-07T20:17:00+08:00</updated><id>https://mafulong.github.io/feed.xml</id><title type="html">Fulongのblog</title><subtitle>Fulongのblog</subtitle><author><name>Fulong Ma</name></author><entry><title type="html">gitbook</title><link href="https://mafulong.github.io/2025/09/01/gitbook/" rel="alternate" type="text/html" title="gitbook" /><published>2025-09-01T00:00:00+08:00</published><updated>2025-09-01T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/09/01/gitbook</id><content type="html" xml:base="https://mafulong.github.io/2025/09/01/gitbook/">&lt;h2 id=&quot;gitbook&quot;&gt;gitbook&lt;/h2&gt;

&lt;h2 id=&quot;gitbook导出equb&quot;&gt;gitbook导出equb&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebook-convert&lt;/code&gt; 是 &lt;strong&gt;Calibre&lt;/strong&gt; 工具套件里的命令行程序，用来转换电子书格式（如 epub ⇄ mobi ⇄ pdf 等）。在 macOS 上安装的方法有几种&lt;/p&gt;

&lt;p&gt;如果你习惯用命令行工具管理软件：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;确保安装了 Homebrew。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在终端运行：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install --cask calibre
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装完成后即可使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebook-convert&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果 GitBook 没提供导出：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;把 GitBook 的章节页面下载（有些 GitBook 提供 GitHub 源码，也可以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt;）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandoc&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calibre&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebook-convert&lt;/code&gt; 转换：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ebook-convert input.html output.epub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;或者把多个 Markdown 整合后转换：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pandoc *.md -o blockchain.epub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Fulong Ma</name></author><category term="Tools" /><category term="Tools" /><summary type="html">gitbook</summary></entry><entry><title type="html">批量替换图片为 GitHub CDN</title><link href="https://mafulong.github.io/2025/08/30/%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2%E5%9B%BE%E7%89%87%E4%B8%BAgithub-cdn/" rel="alternate" type="text/html" title="批量替换图片为 GitHub CDN" /><published>2025-08-30T00:00:00+08:00</published><updated>2025-08-30T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/08/30/%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2%E5%9B%BE%E7%89%87%E4%B8%BAgithub%20cdn</id><content type="html" xml:base="https://mafulong.github.io/2025/08/30/%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2%E5%9B%BE%E7%89%87%E4%B8%BAgithub-cdn/">&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;写博客笔记时，经常会插入大量本地图片或者引用外链。&lt;br /&gt;
但随着时间推移，本地路径容易失效，外链也可能过期，影响文章的可读性。&lt;/p&gt;

&lt;p&gt;一个可行的解决方案是：&lt;br /&gt;
把图片统一上传到 &lt;strong&gt;GitHub 仓库&lt;/strong&gt;，然后通过 &lt;strong&gt;jsDelivr CDN&lt;/strong&gt; 加速，既免费又稳定。&lt;/p&gt;

&lt;p&gt;这里记录一个方法，使用 &lt;strong&gt;PicGo Server + Python 脚本&lt;/strong&gt;，自动批量替换 Markdown 文档里的图片链接。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;picgo-server-配置&quot;&gt;PicGo Server 配置&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;安装 PicGo（推荐 Mac/Windows 用 GUI 版本）。&lt;/li&gt;
  &lt;li&gt;在 PicGo 设置里配置好图床（比如 GitHub 仓库）。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启动 PicGo Server：&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;picgo server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;默认监听 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://127.0.0.1:36677/upload&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;测试上传是否正常：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -X POST http://127.0.0.1:36677/upload \
  -H &quot;Content-Type: application/json&quot; \
  -d &apos;{&quot;list&quot;:[&quot;/Users/yourname/Desktop/test.png&quot;]}&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果返回 JSON，带有一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://cdn.jsdelivr.net/...&lt;/code&gt; 链接，就说明配置成功。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;python-脚本&quot;&gt;Python 脚本&lt;/h2&gt;

&lt;p&gt;核心功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;递归扫描指定目录下所有 Markdown 文件&lt;/li&gt;
  &lt;li&gt;提取其中的图片链接&lt;/li&gt;
  &lt;li&gt;对不是 jsDelivr 开头的图片，调用 PicGo Server 上传&lt;/li&gt;
  &lt;li&gt;替换 Markdown 文件里的链接，并备份原文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;脚本代码（简化版）：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/env python3
import os, re, shutil, requests, tempfile
from pathlib import Path

ROOT_DIR = Path(&quot;/Users/mafulong/mafulong.github.io/_posts&quot;).resolve()
PICGO_SERVER = &quot;http://127.0.0.1:36677/upload&quot;
JSDELIVR_PREFIX = &quot;https://cdn.jsdelivr.net/&quot;

def is_jsdelivr(url: str) -&amp;gt; bool:
    return url.startswith(JSDELIVR_PREFIX)

def run_picgo_upload(local_path: Path) -&amp;gt; str:
    payload = {&quot;list&quot;: [str(local_path)]}
    resp = requests.post(PICGO_SERVER, json=payload, timeout=60)
    resp.raise_for_status()
    data = resp.json()
    return data[&quot;result&quot;][0]

def handle_image(url: str, base_dir: Path) -&amp;gt; str:
    if is_jsdelivr(url):
        return url
    local_path = (base_dir / url).resolve()
    if local_path.exists():
        return run_picgo_upload(local_path)
    return url

def process_file(path: Path):
    text = path.read_text(encoding=&quot;utf-8&quot;)
    matches = re.finditer(r&quot;!\[[^]]*]\(([^)]+)\)&quot;, text)
    new_text = text
    for m in matches:
        old_url = m.group(1)
        new_url = handle_image(old_url, path.parent)
        if new_url != old_url:
            new_text = new_text.replace(old_url, new_url)
    if new_text != text:
        # shutil.copy2(path, path.with_suffix(path.suffix + &quot;.bak&quot;))
        path.write_text(new_text, encoding=&quot;utf-8&quot;)
        print(f&quot;[OK] {path} 已替换图片链接&quot;)

for md in ROOT_DIR.rglob(&quot;*.md&quot;):
    process_file(md)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;使用步骤&quot;&gt;使用步骤&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;修改脚本里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROOT_DIR&lt;/code&gt; 为你的博客目录&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启动 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;picgo server&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;运行脚本：&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 md_cdn_picgo.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所有 Markdown 文件里的图片链接会自动替换为 jsDelivr 地址&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;这样就能把 Markdown 博客里的图片统一迁移到 &lt;strong&gt;GitHub + jsDelivr&lt;/strong&gt;，实现免费图床、自动加速和批量替换，非常适合 Jekyll / Hexo 博客用户。&lt;/p&gt;</content><author><name>Fulong Ma</name></author><category term="Tools" /><category term="Tools" /><category term="PicGo" /><category term="Markdown" /><category term="Python" /><summary type="html">背景</summary></entry><entry><title type="html">Web3专业术语</title><link href="https://mafulong.github.io/2025/08/30/Web3%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD/" rel="alternate" type="text/html" title="Web3专业术语" /><published>2025-08-30T00:00:00+08:00</published><updated>2025-08-30T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/08/30/Web3%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD</id><content type="html" xml:base="https://mafulong.github.io/2025/08/30/Web3%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD/">&lt;h1 id=&quot;大白话说-100-个币圈术语&quot;&gt;大白话说 100 个币圈术语&lt;/h1&gt;

&lt;h2 id=&quot;一核心资产类20-个&quot;&gt;一、核心资产类（20 个）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;比特币（BTC）：2009 年首现加密货币，“数字黄金”。&lt;/li&gt;
  &lt;li&gt;以太坊（ETH）：支持智能合约和 DApp。&lt;/li&gt;
  &lt;li&gt;山寨币（Altcoin）：除比特币外的加密货币。&lt;/li&gt;
  &lt;li&gt;稳定币（Stablecoin）：锚定法币，价格稳，用于避险 / 交易。&lt;/li&gt;
  &lt;li&gt;代币（Token）：区块链数字凭证，代表资产 / 权益。&lt;/li&gt;
  &lt;li&gt;NFT（非同质化代币）：独一无二数字资产。&lt;/li&gt;
  &lt;li&gt;Meme 币（表情包币）：靠模因，无实用性，价格动人。&lt;/li&gt;
  &lt;li&gt;平台币（Platform Token）：交易所 / 应用发行，享权益。&lt;/li&gt;
  &lt;li&gt;原生代币（Native Token）：区块链原生币，如 ETH。&lt;/li&gt;
  &lt;li&gt;分叉币（Fork Coin）：区块链分叉新币，如 BCH。&lt;/li&gt;
  &lt;li&gt;空投币（Airdrop Token）：项目方免费发，吸关注。&lt;/li&gt;
  &lt;li&gt;糖果（Candy）：项目方小额免费代币。&lt;/li&gt;
  &lt;li&gt;代币标准（Token Standard）：代币规则，保兼容。&lt;/li&gt;
  &lt;li&gt;ERC-20：以太坊主流代币标准，支持转账 / 查余额。&lt;/li&gt;
  &lt;li&gt;ERC-721：以太坊 NFT 标准，代币独一不可拆。&lt;/li&gt;
  &lt;li&gt;元宇宙（Metaverse）：虚拟世界，加密货币 / NFT 为经济核心。&lt;/li&gt;
  &lt;li&gt;数字藏品（Digital Collection）：国内 NFT，受监管。&lt;/li&gt;
  &lt;li&gt;矿币（Mineable Coin）：靠挖矿产生的币。&lt;/li&gt;
  &lt;li&gt;质押币（Staked Coin）：锁仓支持网络，获利息。&lt;/li&gt;
  &lt;li&gt;销毁币（Burned Coin）：项目方删币减流通，助涨。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;二基础技术类15-个&quot;&gt;二、基础技术类（15 个）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;区块链（Blockchain）：公开不可改的网络账本，透明防作弊。&lt;/li&gt;
  &lt;li&gt;智能合约（Smart Contract）：条件满足自动执行的程序。&lt;/li&gt;
  &lt;li&gt;共识机制（Consensus Mechanism）：区块链规则，确保一致。&lt;/li&gt;
  &lt;li&gt;工作量证明（PoW）：算力解题赢记账权，费电。&lt;/li&gt;
  &lt;li&gt;权益证明（PoS）：按持币量 / 时长定记账权，无需高算力。&lt;/li&gt;
  &lt;li&gt;分叉（Fork）：区块链规则分歧分叉，分软 / 硬分叉。&lt;/li&gt;
  &lt;li&gt;节点（Node）：存账本、验交易的终端，越多越安全。&lt;/li&gt;
  &lt;li&gt;哈希率（Hash Rate）：挖矿计算速度，PoW 下越快越易挖币。&lt;/li&gt;
  &lt;li&gt;分片（Sharding）：拆分账本提速度，解拥堵。&lt;/li&gt;
  &lt;li&gt;Gas 费（Gas Fee）：以太坊交易 / 用应用的服务费，多付优先。&lt;/li&gt;
  &lt;li&gt;区块（Block）：存交易的“盒子”，连成区块链。&lt;/li&gt;
  &lt;li&gt;创世区块（Genesis Block）：区块链首个区块，起点。&lt;/li&gt;
  &lt;li&gt;去中心化（Decentralization）：无单一主导，权力分散。&lt;/li&gt;
  &lt;li&gt;中心化（Centralization）：单一主体管控，如 CEX。&lt;/li&gt;
  &lt;li&gt;加密算法（Encryption Algorithm）：加密信息，保安全。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;三交易流通类20-个&quot;&gt;三、交易流通类（20 个）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;中心化交易所（CEX）：如币安，存币托管，便捷。&lt;/li&gt;
  &lt;li&gt;去中心化交易所（DEX）：钱包直接交易，资产自主。&lt;/li&gt;
  &lt;li&gt;交易对（Trading Pair）：两币交易组合，示价格比例。&lt;/li&gt;
  &lt;li&gt;市价单（Market Order）：实时价立即成交，优先速度。&lt;/li&gt;
  &lt;li&gt;限价单（Limit Order）：设定价成交，未达不执行。&lt;/li&gt;
  &lt;li&gt;挂单（Order Placement）：挂买卖需求，等成交。&lt;/li&gt;
  &lt;li&gt;撤单（Order Cancellation）：未成交取消挂单。&lt;/li&gt;
  &lt;li&gt;成交（Trade Execution）：买卖单匹配，交易完。&lt;/li&gt;
  &lt;li&gt;滑点（Slippage）：下单价与成交价偏差，波动大时易现。&lt;/li&gt;
  &lt;li&gt;流动性（Liquidity）：市场活跃度，高则易成交。&lt;/li&gt;
  &lt;li&gt;流动性池（Liquidity Pool）：DEX 资金池，存币赚手续费。&lt;/li&gt;
  &lt;li&gt;做市商（Market Maker）：供买卖单增强流动性，赚差价。&lt;/li&gt;
  &lt;li&gt;跨链（Cross-Chain）：不同区块链资产转移。&lt;/li&gt;
  &lt;li&gt;跨链桥（Cross-Chain Bridge）：跨链工具，有黑客风险。&lt;/li&gt;
  &lt;li&gt;提币（Withdrawal）：交易所转币到钱包，填对地址。&lt;/li&gt;
  &lt;li&gt;充值（Deposit）：钱包转币到交易所，等确认。&lt;/li&gt;
  &lt;li&gt;水龙头（Faucet）：免费发少量币，供体验。&lt;/li&gt;
  &lt;li&gt;OTC 交易（Over-The-Counter）：点对点交易，适合大额。&lt;/li&gt;
  &lt;li&gt;合约交易（Contract Trading）：赌币价涨跌，可加杠杆。&lt;/li&gt;
  &lt;li&gt;杠杆交易（Leveraged Trading）：借资金交易，盈亏放大。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;四市场投资类25-个&quot;&gt;四、市场投资类（25 个）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;牛市（Bull Market）：市场长期涨，投资者乐观。&lt;/li&gt;
  &lt;li&gt;熊市（Bear Market）：市场长期跌，投资者悲观。&lt;/li&gt;
  &lt;li&gt;震荡（Volatility）：币价小幅涨跌，无趋势。&lt;/li&gt;
  &lt;li&gt;瀑布（Crash）：币价短时大跌。&lt;/li&gt;
  &lt;li&gt;反弹（Rebound）：币价跌后短期回升。&lt;/li&gt;
  &lt;li&gt;回调（Correction）：币价涨后短期调整。&lt;/li&gt;
  &lt;li&gt;盘整（Consolidation）：币价区间横盘。&lt;/li&gt;
  &lt;li&gt;抄底（Bottom Fishing）：预判见底买入，易“抄半山腰”。&lt;/li&gt;
  &lt;li&gt;追顶（Top Selling）：预测见顶卖出，锁利润。&lt;/li&gt;
  &lt;li&gt;韭菜（Newbie/Unskilled Investor）：新手易被收割。&lt;/li&gt;
  &lt;li&gt;庄家 / 巨鲸（Whale）：持大量币，可影响币价。&lt;/li&gt;
  &lt;li&gt;洗盘（Wash Trading）：庄家控价吓散户，低价吸筹。&lt;/li&gt;
  &lt;li&gt;拉盘（Pump）：庄家买币推高价，吸眼球。&lt;/li&gt;
  &lt;li&gt;砸盘（Dump）：庄家卖币压低价，捡筹码。&lt;/li&gt;
  &lt;li&gt;套牢（Trapped）：买币后价跌，亏不舍卖。&lt;/li&gt;
  &lt;li&gt;解套（Unlocked）：套牢后价回买入价，保本。&lt;/li&gt;
  &lt;li&gt;止盈（Take Profit）：赚目标收益后卖，锁利润。&lt;/li&gt;
  &lt;li&gt;止损（Stop Loss）：亏到点卖出，减少损失。&lt;/li&gt;
  &lt;li&gt;HODL：币圈黑话，长期持币不卖。&lt;/li&gt;
  &lt;li&gt;FOMO（Fear Of Missing Out）：怕错过，跟风投。&lt;/li&gt;
  &lt;li&gt;FUD（Fear, Uncertainty, Doubt）：散负面造恐慌，逼散户卖。&lt;/li&gt;
  &lt;li&gt;梭哈（All-In）：投全部资金买币，风险高。&lt;/li&gt;
  &lt;li&gt;定投（Dollar-Cost Averaging）：定期定额买币，摊风险。&lt;/li&gt;
  &lt;li&gt;私募（Private Placement）：项目早期向特定人发行，价低。&lt;/li&gt;
  &lt;li&gt;ICO（Initial Coin Offering）：项目首次发布募资，合规差。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;五安全存储类10-个&quot;&gt;五、安全存储类（10 个）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;加密货币钱包（Crypto Wallet）：存币工具，管私钥 / 收币方。&lt;/li&gt;
  &lt;li&gt;冷钱包（Cold Wallet）：离线钱包，安全高，存大额。&lt;/li&gt;
  &lt;li&gt;热钱包（Hot Wallet）：联网钱包，便捷有风险，存小额。&lt;/li&gt;
  &lt;li&gt;私钥（Private Key）：支配资产密码，不泄露不丢。&lt;/li&gt;
  &lt;li&gt;公钥（Public Key）：生成地址，可公开收币。&lt;/li&gt;
  &lt;li&gt;钱包地址（Wallet Address）：收币“门牌号”，填错丢币。&lt;/li&gt;
  &lt;li&gt;助记词（Mnemonic Phrase）：12/24 词，恢复钱包，妥存。&lt;/li&gt;
  &lt;li&gt;Keystore 文件：加密恢复文件，需配合密码。&lt;/li&gt;
  &lt;li&gt;多重签名（Multi-Signature）：多私钥同意才转币。&lt;/li&gt;
  &lt;li&gt;钓鱼链接（Phishing Link）：伪装网站，偷私钥 / 密码。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;六生态应用类10-个&quot;&gt;六、生态应用类（10 个）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;DApp（去中心化应用）：区块链应用，无管控，数据公开。&lt;/li&gt;
  &lt;li&gt;DeFi（去中心化金融）：区块链金融，无中介。&lt;/li&gt;
  &lt;li&gt;DAO（去中心化自治组织）：代币持有者投票决策。&lt;/li&gt;
  &lt;li&gt;GameFi（游戏金融）：玩游戏赚代币，多有风险。&lt;/li&gt;
  &lt;li&gt;SocialFi（社交金融）：社交 + 金融，如代币打赏。&lt;/li&gt;
  &lt;li&gt;流动性挖矿（Liquidity Mining）：存币到池，获奖励。&lt;/li&gt;
  &lt;li&gt;质押挖矿（Staking）：锁币支持网络，获利息。&lt;/li&gt;
  &lt;li&gt;闪电贷（Flash Loan）：无抵押借贷，同一交易还清。&lt;/li&gt;
  &lt;li&gt;MEV（矿工可提取价值）：矿工调整交易顺序赚差价。&lt;/li&gt;
  &lt;li&gt;白皮书（Whitepaper）：项目文档，含技术 / 规划。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;-加密圈术语前40条中英文简释&quot;&gt;💰 加密圈术语前40条（中英文简释）&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;比特币（BTC）&lt;/strong&gt;：第一个去中心化加密货币，被称为“数字黄金”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;以太坊（ETH）&lt;/strong&gt;：第二大币种，支持智能合约，是区块链应用的基础&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;USDT（泰达币）&lt;/strong&gt;：一种稳定币，和美元1:1挂钩&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;USDC&lt;/strong&gt;：另一种稳定币，由Circle公司发行，和USDT类似&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;山寨币（Altcoin）&lt;/strong&gt;：除了比特币以外的所有币种统称&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;狗狗币（DOGE）&lt;/strong&gt;：一种娱乐性质的加密货币，因社交媒体而流行&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;柴犬币（SHIB）&lt;/strong&gt;：一种价格低廉的代币，被认为是“狗狗币杀手”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;币安币（BNB）&lt;/strong&gt;：币安交易所的平台币，用于支付手续费或投资生态项目&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;瑞波币（XRP）&lt;/strong&gt;：专注于跨境支付的加密货币&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;波卡（DOT）&lt;/strong&gt;：一个专注于区块链互操作性的加密项目代币&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-加密交易与订单术语&quot;&gt;📈 加密交易与订单术语&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;现货交易&lt;/strong&gt;：直接买卖加密货币，最常见的交易方式&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;杠杆交易&lt;/strong&gt;：通过借贷资金放大交易金额，新手不建议使用&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;合约交易&lt;/strong&gt;：根据涨跌方向预测价格，可做多或做空，风险较高&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;限价单&lt;/strong&gt;：设定一个目标价格，只有市场价格达到时才会成交的订单&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;市价单&lt;/strong&gt;：按当前市场价格立即成交的订单&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;挂单&lt;/strong&gt;：在交易所设置买入或卖出的价格，等待市场触发成交&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;止损单&lt;/strong&gt;：设置一个价格，当币价跌到该点时自动卖出，避免更大亏损&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;止盈单&lt;/strong&gt;：设置一个价格，当币价涨到该点时自动卖出，锁定收益&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;交易对&lt;/strong&gt;：两种资产之间的交易组合，如 BTC/USDT&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;手续费&lt;/strong&gt;：每笔交易需要支付的费用，通常为交易金额的一小部分&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-市场行情与情绪&quot;&gt;📊 市场行情与情绪&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;牛市&lt;/strong&gt;：市场整体价格持续上涨的阶段&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;熊市&lt;/strong&gt;：市场整体价格持续下跌的阶段&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;波动率&lt;/strong&gt;：价格变化的幅度，加密货币通常波动较大&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;拉盘&lt;/strong&gt;：大资金快速买入，抬高价格&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;砸盘&lt;/strong&gt;：大资金快速卖出，导致价格暴跌&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;庄家&lt;/strong&gt;：拥有大量资金和筹码的操盘者，可以影响市场价格&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;散户&lt;/strong&gt;：资金量小的普通投资者，与庄家相对&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;割韭菜&lt;/strong&gt;：老玩家通过操控市场让新手高价买入低价卖出&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FOMO（错失恐惧症）&lt;/strong&gt;：害怕错过机会而盲目追高买入&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;空头&lt;/strong&gt;：看跌市场的人，押注价格下跌&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-技术分析常见术语&quot;&gt;📉 技术分析常见术语&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;K线图&lt;/strong&gt;：用蜡烛图形状表示价格涨跌趋势的图表，是市场分析的重要工具&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;支撑位&lt;/strong&gt;：价格下跌时可能止住的价位&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;阻力位&lt;/strong&gt;：价格上涨时可能遇到的压力价位&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MACD&lt;/strong&gt;：一种技术指标，用于判断市场走势和买卖信号&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RSI（相对强弱指标）&lt;/strong&gt;：判断市场是否过热或过冷的指标&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;交易量&lt;/strong&gt;：市场中某段时间内买卖的币总数，用来分析市场活跃度&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;深度图&lt;/strong&gt;：显示市场挂单情况的图表，用于判断买卖力量&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;多头（Long）&lt;/strong&gt;：看涨市场的人，押注价格上涨&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;开仓&lt;/strong&gt;：可以是做多或做空&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;平仓&lt;/strong&gt;：锁定盈利或止损&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Fulong Ma</name></author><category term="Web3" /><category term="Web3" /><summary type="html">大白话说 100 个币圈术语</summary></entry><entry><title type="html">香港办卡</title><link href="https://mafulong.github.io/2025/08/24/%E9%A6%99%E6%B8%AF%E5%8A%9E%E5%8D%A1/" rel="alternate" type="text/html" title="香港办卡" /><published>2025-08-24T00:00:00+08:00</published><updated>2025-08-24T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/08/24/%E9%A6%99%E6%B8%AF%E5%8A%9E%E5%8D%A1</id><content type="html" xml:base="https://mafulong.github.io/2025/08/24/%E9%A6%99%E6%B8%AF%E5%8A%9E%E5%8D%A1/">&lt;h2 id=&quot;香港办卡&quot;&gt;香港办卡&lt;/h2&gt;

&lt;p&gt;内地人开香港账户都需要注意什么呢？ 1️⃣首先人必须在香港，进入香港后，连上本地的wifi，机场、公园、地铁站都有免费🛜WiFi，手机下载好中银和汇丰两个App，我以汇丰为例。&lt;/p&gt;

&lt;p&gt;身份验证： ✅用手机NFC功能扫描港澳通行证（贴手机背部上方）； ✅人脸识别（摘眼镜！光线要亮，别遮挡）； ✅上传移民局出入境记录（微信提前搜索：“移民局12367”下载好出入境记录，注意是是PDF格式）&lt;/p&gt;

&lt;p&gt;注意事项： ✅手机要开通漫游，接收验证码 ✅身份证、港澳通行证有效期必须大于6个月以上 ✅入境时如果走人工通道保留好签证小白条，如果走自助通道，去出入境网站截屏入境记录。 ✅收到实体卡后， 别忘了在手机银行里激活，存100元 ✅开卡后牢记账户和密码，最好写下来 ✅实体卡约20个工作日寄到内地家中&lt;/p&gt;

&lt;p&gt;、&lt;/p&gt;

&lt;p&gt;https://www.xiaohongshu.com/explore/67de7a2c0000000009039ee1?xsec_token=ABSpfbH7nGGPDEp91QFWP_ospSxrGufHQLykJzflM2Iv0=&amp;amp;xsec_source=pc_search&amp;amp;source=web_explore_feed&lt;/p&gt;

&lt;p&gt;我办的卡：有汇丰、中银、工银、建亚、信银、ZA、天星、永隆。&lt;/p&gt;

&lt;p&gt;推荐办理：
汇丰、中银、工银、ZA、天星。&lt;/p&gt;

&lt;p&gt;ZA(众安)银-行码：HW2B47
开-户时填我的邀-请码，达-标后我个人返100港-币给你
怎么才能达－标：1、在香港开投-资账-户(必须在香港才能开)，2、审核通过后放1000港币在账-户里，其中100要买基-金，3、一天左右就能达。
办-理理由：
1.中银、汇丰、工银资-金免费出国。
2.建亚、工银、ATM直接取现。
5.信银大富翁存-款利-率高，玩信-用卡必开。
4.ZA对虚-拟货-币友好，香港排名第一的虚-拟-银行。
5.天星换汇很好。&lt;/p&gt;

&lt;p&gt;开卡注意事项：
1.中银理由投-资理-财，下面都用这个。会需要你提供投-资-证明，你提前在支-付宝买-个几百块基-金就好。
2.汇丰可能会看投-资证明，最容易的，也可以手机开户，存100激活。
3.&lt;strong&gt;工银网上申-请，之后预约网点，还有一个渠道在落马洲地铁站和罗湖口岸出境方向有vtm开户，我就在那开的，理由理-财，开-不了投-资。&lt;/strong&gt;建议有空去申领密码器和设置ATM海外取-款，最长5年(打人工电话或在香港ATM设置)，日2W，有些网点可能要存1W有些不用。
4.建亚先在公众号或app填表，之后会有总行的人联系你，帮你预-约你选的开-户行，就算没预约上到了分行他们核-实后一般也会帮你办理，不用存-钱。
5.&lt;strong&gt;信银预约直接去开-户，申领提款卡免费邮寄的，不用存-钱。网上开-户想要提款卡，某些网点等1天，大多数要等7天才可申领，避坑香港岛。&lt;/strong&gt;
6.&lt;strong&gt;ZA和天星，直接开。&lt;/strong&gt;
7.招商永隆，资-金没达标50w给你开受限账-户，普通账-户也要验-资，没啥用。
8.其他虚拟银行没啥大用，除非有活动送钱才开。&lt;/p&gt;

&lt;p&gt;资-金出国：
1.兴业环宇人生(购汇5折最推荐)→汇丰
2.中行→中银，中行购汇不优，我第一次被薅了200多元，建议下午购汇。
3.工行→工银，大亚湾免费，其他地区免费到6月30日。
4.要手续费的像熊猫速汇，WISE、支付宝和腾讯跨境汇款。
7.人-肉背每次限2W人民币美元我暂不考虑，能存人-民币的有ATM柜台中银、工银、南洋、永隆，汇丰柜台。&lt;/p&gt;

&lt;p&gt;资-金回内地ATM机取-现或汇-款：
1.建亚无损取的人-民币。
2.&lt;strong&gt;工银有损取港-币转换，但汇率优，损耗小。&lt;/strong&gt;
3.&lt;strong&gt;汇丰蓝狮子取现&lt;/strong&gt;
4.&lt;strong&gt;中银→中行免费&lt;/strong&gt;
5.&lt;strong&gt;工银→工行免费&lt;/strong&gt;
6.&lt;strong&gt;汇丰和中银的扣账卡绑定支-付宝200内免手-续费。&lt;/strong&gt;
7.收费熊猫速汇、WISE、支付-宝和腾讯跨境汇-款&lt;/p&gt;</content><author><name>Fulong Ma</name></author><category term="DailyLife" /><category term="DailyLife" /><summary type="html">香港办卡</summary></entry><entry><title type="html">win11游戏主机配置</title><link href="https://mafulong.github.io/2025/08/17/win11%E6%B8%B8%E6%88%8F%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE/" rel="alternate" type="text/html" title="win11游戏主机配置" /><published>2025-08-17T00:00:00+08:00</published><updated>2025-08-17T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/08/17/win11%E6%B8%B8%E6%88%8F%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE</id><content type="html" xml:base="https://mafulong.github.io/2025/08/17/win11%E6%B8%B8%E6%88%8F%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE/">&lt;h1 id=&quot;主机&quot;&gt;主机&lt;/h1&gt;

&lt;h2 id=&quot;win11游戏主机配置&quot;&gt;win11游戏主机配置&lt;/h2&gt;

&lt;h2 id=&quot;电脑必装软件&quot;&gt;电脑必装软件&lt;/h2&gt;

&lt;h3 id=&quot;电脑配置&quot;&gt;电脑配置&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt;：AMD R7 9800X3D —— ¥3299&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;主板&lt;/strong&gt;：技嘉 B850 大冰雕 WiFi d5 —— ¥1649&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;内存&lt;/strong&gt;：阿斯加特女武神二代 24×2 48G DDR5 6000MHz C28 —— ¥1089&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;固态&lt;/strong&gt;：致钛 TiPlus 7100 4TB —— ¥1799&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;显卡&lt;/strong&gt;：影驰 RTX 5080 金属大师白金 OC —— ¥9299&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;电源&lt;/strong&gt;：海韵 FOCUS GX 1000W ATX3.1 白金牌全模组 —— ¥1249&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CPU散热&lt;/strong&gt;：瓦尔基里 B360GT —— ¥549&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;机箱&lt;/strong&gt;：爱国者 星璨大岚 —— ¥449&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;风扇&lt;/strong&gt;：棱镜 6Pro ×7 —— ¥140&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;驱动&quot;&gt;驱动&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;机箱下面有个屏显，没装&lt;/li&gt;
  &lt;li&gt;散热的屏显: myth.Cool 同时可以展示系统信息&lt;/li&gt;
  &lt;li&gt;NVIDIA app： 显卡驱动&lt;/li&gt;
  &lt;li&gt;GIBGABYTE control center: 技嘉主板软件，同时可以自动下电脑网卡等驱动&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;软件&quot;&gt;软件&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;clash. 花云上下载&lt;/li&gt;
  &lt;li&gt;ea app&lt;/li&gt;
  &lt;li&gt;steam app&lt;/li&gt;
  &lt;li&gt;uu加速器&lt;/li&gt;
  &lt;li&gt;epic games app&lt;/li&gt;
  &lt;li&gt;xbox app&lt;/li&gt;
  &lt;li&gt;xbox 配件 蓝牙连手柄用，否则只能有线连&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;游戏&quot;&gt;游戏&lt;/h2&gt;

&lt;h3 id=&quot;快捷键&quot;&gt;快捷键&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;cmd + G: 唤醒xbox游戏工具箱&lt;/li&gt;
  &lt;li&gt;option + cmd + b: 切换Hdr开关&lt;/li&gt;
  &lt;li&gt;option + z: 唤醒nvidia 游戏工具箱&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;电脑设置&quot;&gt;电脑设置&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;调整游戏录制时长。 设置 -&amp;gt; 游戏 -&amp;gt; 摄像 -&amp;gt; 录制游戏过程 下拉箭头 -&amp;gt; 录制上次内容 时间30s 改成 5分钟&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;视频录制分享&quot;&gt;视频录制分享&lt;/h3&gt;

&lt;p&gt;cmd + G回放下载。&lt;/p&gt;

&lt;p&gt;cmd + G点图库就可以点开视频。 微软自带champin可以编辑视频，编辑后保存到onedrive，再手机onedrive里下载。&lt;/p&gt;

&lt;h3 id=&quot;游戏模式&quot;&gt;游戏模式&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;开启游戏模式&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;打开 &lt;em&gt;设置 → 游戏 → 游戏模式&lt;/em&gt;，确保开启。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;开启硬件加速 GPU 计划&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;设置 → 显示 → 图形 → 更改默认图形设置 → 开启“硬件加速 GPU 计划”。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Steam 玩家注意事项&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;打开 Steam → 好友 → 离线模式。&lt;/li&gt;
      &lt;li&gt;避免后台好友列表占用，帧数会更稳定。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;独显直连&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;确保开启独显直连（特别是笔记本用户）。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;电源模式&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;联想用户：超能模式 &amp;lt; 野兽模式 → 建议开启“野兽模式”。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;网络加速&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;推荐使用加速器（如雷神），能降低延迟。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;系统设置优化&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;显卡控制面板 → 调整为性能模式&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;显存不足时 → 开启内存回退&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;电源管理 → 最高性能优先&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;系统 → 屏幕 → 图形 → 开启 GPU 硬件加速 → 重启电脑&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;显示器设置&quot;&gt;显示器设置&lt;/h2&gt;

&lt;p&gt;小米电视gpro27u&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关闭自动亮度&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;默认开启 → 会错误调整伽马和亮度，导致观感不好。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;游戏模式优化&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;进入方式&lt;/strong&gt;：遥控器 → 长按“三条杠” → 二级菜单 → 设置。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;推荐参数&lt;/strong&gt;：
    &lt;ul&gt;
      &lt;li&gt;亮度：40（默认 70，过高伤眼）&lt;/li&gt;
      &lt;li&gt;色温：改为 &lt;strong&gt;标准&lt;/strong&gt;（避免暖色 / 偏红）&lt;/li&gt;
      &lt;li&gt;色彩增强：关闭&lt;/li&gt;
      &lt;li&gt;色彩空间：P3&lt;/li&gt;
      &lt;li&gt;FreeSync：开启（防撕裂）&lt;/li&gt;
      &lt;li&gt;响应时间：普通（快速模式会过冲）.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📌 调整后：画面不再发红，色彩自然，适合日常与游戏使用。&lt;/p&gt;

&lt;p&gt;不建议在 NVIDIA 控制面板里修改数字通道：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HDR 下可能有效，但会影响 SDR 下的色准。&lt;/li&gt;
  &lt;li&gt;尽量在显示器硬件里直接调节。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;暗部增强功能&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;提升暗部细节辨识度（例如黑夜地图能更容易发现敌人）。&lt;/li&gt;
  &lt;li&gt;对 FPS 玩家非常实用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;游戏-1&quot;&gt;游戏&lt;/h1&gt;

&lt;h2 id=&quot;软件设置-cod&quot;&gt;软件设置 Cod&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;显示设置&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;显示模式&lt;/strong&gt;：全屏专用&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;显示器&lt;/strong&gt;：选择主显示器&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;显卡&lt;/strong&gt;：确保使用独显，不要用集显&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;刷新率&lt;/strong&gt;：与屏幕一致&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;分辨率&lt;/strong&gt;：根据自己屏幕设置&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;垂直同步&lt;/strong&gt;：关闭&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;关闭语音聊天&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;路径：音频设置 → 语音聊天 → 全关（推荐）。&lt;/li&gt;
  &lt;li&gt;效果：从 130 FPS → 160–200 FPS，大幅提升帧数，掉帧问题明显改善。&lt;/li&gt;
  &lt;li&gt;原因：语音频道后台占用系统资源，影响帧数。COD19、20 也有类似问题，但 COD21 更严重。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DLSS / 帧生成&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;DLSS / DLSSR&lt;/strong&gt;：建议开启（提升画质和性能）。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;帧生成（Frame Generation）&lt;/strong&gt;：不建议开启。
    &lt;ul&gt;
      &lt;li&gt;开启后帧数可冲到 200+ FPS，但输入延迟明显增加（从 &amp;lt;20ms → 40ms）。&lt;/li&gt;
      &lt;li&gt;FPS 游戏对延迟敏感 → 关掉更合适。&lt;/li&gt;
      &lt;li&gt;单机 / 画面党可开启，但多人 FPS 建议关闭。&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;注意事项&lt;/strong&gt;：需要在系统里开启 &lt;strong&gt;GPU 硬件加速&lt;/strong&gt; 才能生效。&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;提示&lt;/strong&gt;：开启后帧数更高，但可能带来输入延迟 → FPS 游戏需谨慎。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;显卡驱动务必保持最新&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每次新作发布，官方都会更新驱动优化性能。&lt;/li&gt;
  &lt;li&gt;NVIDIA → GeForce Experience 可一键更新。&lt;/li&gt;
  &lt;li&gt;AMD 用户去官网输入显卡型号下载即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;锁定画面设置（视觉增强）&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;路径&lt;/strong&gt;：设置 → 界面 → 易读性 → 定制颜色 → 打开。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;敌方颜色饱和度 / 亮度拉满&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;滤镜&lt;/strong&gt;：选择滤镜 2，两个颜色强度拉满。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;效果&lt;/strong&gt;：敌人更明显，画面更干净，提升发现敌人的效率。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;缺点：色调可能部分玩家不喜欢，可随时改回默认。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;质量设置&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;渲染分辨率&lt;/strong&gt;：100（不要降低，否则会模糊）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;动态分辨率&lt;/strong&gt;：关闭（帧数不足时可以开，但可能模糊/撕裂）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;图像锐化&lt;/strong&gt;：
    &lt;ul&gt;
      &lt;li&gt;推荐 &lt;strong&gt;CAS&lt;/strong&gt;（75 左右），画质比大力水手更清晰&lt;/li&gt;
      &lt;li&gt;大力水手帧数高，但噪点和模糊严重&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;超分辨率生成&lt;/strong&gt;：关闭&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;显存比例&lt;/strong&gt;：默认 80（显存不足可开到 90）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;着色器预缓存&lt;/strong&gt;：一定要关闭，否则会频繁卡顿&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;画质与帧数测试结论&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;作者花费 7–8 小时测试，逐项调整后得到：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;对帧数影响最大&lt;/strong&gt;：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;子弹撞击效果&lt;/strong&gt;：关闭后可提升 ~30 帧。&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;屏幕反射&lt;/strong&gt;：关闭或调低可提升 ~10–20 帧。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;对帧数影响中等&lt;/strong&gt;：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;环境&lt;/strong&gt;：影响适中，需根据需求调整。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;对帧数影响小但画质影响大&lt;/strong&gt;：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;全局质量、阴影和光照&lt;/strong&gt;：画质显著提升，但帧数损耗小。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;材质分辨率&lt;/strong&gt;：必须设高，对画质影响大，对帧数影响小。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;景深&lt;/strong&gt;：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;开启 → 开镜后枪模糊&lt;/li&gt;
      &lt;li&gt;关闭 → 枪更清晰（推荐关闭）。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;材质与细节&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;细节质量（石头草木等）&lt;/strong&gt;：低（性能优化明显）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;网格解析度&lt;/strong&gt;：高（对帧率影响小，但能提升视觉和武器贴图特效）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;粒子效果&lt;/strong&gt;：低（高会掉 10-20 帧）&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;材质加载与传输&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;高清材质流&lt;/strong&gt;：开优化（对画质有帮助，显存占用适中）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;本地材质传输&lt;/strong&gt;：低（对战区大地图远景才有用，一般影响不大，显存占用高）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;其他提示&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;锁帧设置&lt;/strong&gt;：COD20 有效，但本作无明显作用。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DLSS Bug&lt;/strong&gt;：有时切换后会自动变成 CAS → 需留意。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;数据监控&lt;/strong&gt;：界面 → 状态 → 选择显示 FPS、延迟、显存占用等信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每次修改画质设置后，&lt;strong&gt;一定要重新预载着色器&lt;/strong&gt;：
 进入显示界面 → 预载 → 保存 → 退出游戏 → 重启再进游戏&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;软件设置-apex&quot;&gt;软件设置 Apex&lt;/h2&gt;

&lt;h3 id=&quot;关键参数解释与建议&quot;&gt;关键参数解释与建议&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;以“稳定帧率优先”为导向；如需更好画质可在稳定后微调。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;① 各向异性过滤（Anisotropic Filtering）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;影响&lt;/strong&gt;：主要吃显卡，&lt;strong&gt;对帧数影响仅几帧&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;建议&lt;/strong&gt;：在中低端卡上也能开到 &lt;strong&gt;8×&lt;/strong&gt;（示例：&lt;strong&gt;GTX 1050 Ti @ 8×&lt;/strong&gt; 运行良好）。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;取舍&lt;/strong&gt;：更高带来更清晰的斜向纹理，性价比高。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;② 碰撞痕迹/冲击痕迹（Decals / Impact Marks）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;影响&lt;/strong&gt;：&lt;strong&gt;吃 CPU&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;建议&lt;/strong&gt;：&lt;strong&gt;调为 0&lt;/strong&gt;，明显减负。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;③ 纹理串流预算（Texture Streaming Budget）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;原理&lt;/strong&gt;：与&lt;strong&gt;显存大小&lt;/strong&gt;绑定，决定可加载纹理体量与切换速度。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：
    &lt;ol&gt;
      &lt;li&gt;先在游戏里选择接近你显存的档位，&lt;strong&gt;查看/记下实际“流内存大小”&lt;/strong&gt;；&lt;/li&gt;
      &lt;li&gt;回到配置文件写入相应值；&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;特殊规则&lt;/strong&gt;：如果你想设为 &lt;strong&gt;2GB 显存&lt;/strong&gt;，配置文件中&lt;strong&gt;该字段需写“1”&lt;/strong&gt;；&lt;strong&gt;其余情况写“0”&lt;/strong&gt;（按原作者说明）。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;策略&lt;/strong&gt;：在&lt;strong&gt;不爆显存&lt;/strong&gt;前提下尽量拉高，提升清晰度与加载体验。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;④ 模型刷新/细节（Model LOD/Detail）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;建议&lt;/strong&gt;：&lt;strong&gt;0.6&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;原因&lt;/strong&gt;：再低会让&lt;strong&gt;中距离对枪“果冻/方块化”&lt;/strong&gt;（人物像块状），影响观察。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⑤ 阴影 &amp;amp; 环境光遮蔽（Shadows / Ambient Occlusion）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;建议&lt;/strong&gt;：&lt;strong&gt;全部关闭&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;原因&lt;/strong&gt;：这两项对视觉收益有限、对性能影响大。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⑥ 自适应分辨率 / 帧率目标（Dynamic Resolution / Adaptive）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;定位&lt;/strong&gt;：本方案的&lt;strong&gt;关键项&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;机制&lt;/strong&gt;：为保持&lt;strong&gt;目标帧数&lt;/strong&gt;，在负载高时&lt;strong&gt;动态降低分辨率/画质&lt;/strong&gt;，负载回落再提升。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;用法&lt;/strong&gt;：
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;启用&lt;/strong&gt;自适应（配置项打开），设置&lt;strong&gt;目标帧率&lt;/strong&gt;（如 60/75/90/100）。&lt;/li&gt;
      &lt;li&gt;分辨率基准建议 &lt;strong&gt;1080p&lt;/strong&gt;。&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;抗锯齿&lt;/strong&gt;（TAA 等）建议&lt;strong&gt;开启&lt;/strong&gt;，与自适应配合可减轻低分辨率时的锯齿与闪烁。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;实测参考（GTX 1050 Ti）&lt;/strong&gt;：
    &lt;ul&gt;
      &lt;li&gt;启用自适应时，&lt;strong&gt;上限约 ~100FPS&lt;/strong&gt;；&lt;/li&gt;
      &lt;li&gt;若 100FPS 仍不满足，可将&lt;strong&gt;与自适应相关的 3 项置 0&lt;/strong&gt;（等同关闭/限制），实际读数出现 &lt;strong&gt;100–144FPS&lt;/strong&gt; 的波动；&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;代价&lt;/strong&gt;：中距离识别变差（“红点看缘分”），画面锐度随负载波动较明显。&lt;/li&gt;
      &lt;li&gt;建议：&lt;strong&gt;先求稳再求高&lt;/strong&gt;，优先稳定的目标帧（如 90/100），再考虑进一步抬上限。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⑦ 抗锯齿（AA）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;建议&lt;/strong&gt;：本方案里&lt;strong&gt;默认开启&lt;/strong&gt;，与自适应联动更顺眼。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;：如极度追求清晰边缘与响应，可在稳定后尝试调低或关闭，但可能出现闪烁。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;#&lt;/p&gt;</content><author><name>Fulong Ma</name></author><category term="Tools" /><category term="Tools" /><summary type="html">主机</summary></entry><entry><title type="html">mac mini做nas+小米电视</title><link href="https://mafulong.github.io/2025/08/10/mac-mini%E5%81%9Anas+%E5%B0%8F%E7%B1%B3%E7%94%B5%E8%A7%86/" rel="alternate" type="text/html" title="mac mini做nas+小米电视" /><published>2025-08-10T00:00:00+08:00</published><updated>2025-08-10T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/08/10/mac%20mini%E5%81%9Anas+%E5%B0%8F%E7%B1%B3%E7%94%B5%E8%A7%86</id><content type="html" xml:base="https://mafulong.github.io/2025/08/10/mac-mini%E5%81%9Anas+%E5%B0%8F%E7%B1%B3%E7%94%B5%E8%A7%86/">&lt;h2 id=&quot;mac-mini做nas小米电视&quot;&gt;mac mini做nas+小米电视&lt;/h2&gt;

&lt;h2 id=&quot;nas&quot;&gt;nas&lt;/h2&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emby&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unless&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stopped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mafulong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Downloads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NAS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emby_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8096&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;8096&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;linuxserver/emby&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;自己ip&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ipconfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getifaddr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;en1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;adb&quot;&gt;adb&lt;/h2&gt;

&lt;p&gt;adb可以远程connect&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;adb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;31.148&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;adb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;安装软件&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;adb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TVBox_takagen99_20250706&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1456&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arm64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;apk&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;传输文件&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;但小米电视无法读adb的文件&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;adb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Users/mafulong/Downloads/爱、死亡与机器人.Love.Death.and.Robots.S01E01.中英字幕.WEBrip.720P-人人影视.V2.mp4&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sdcard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Movies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Fulong Ma</name></author><category term="Tools" /><category term="Tools" /><summary type="html">mac mini做nas+小米电视</summary></entry><entry><title type="html">Goland的external tool</title><link href="https://mafulong.github.io/2025/08/09/Goland%E7%9A%84external-tool/" rel="alternate" type="text/html" title="Goland的external tool" /><published>2025-08-09T00:00:00+08:00</published><updated>2025-08-09T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/08/09/Goland%E7%9A%84external%20tool</id><content type="html" xml:base="https://mafulong.github.io/2025/08/09/Goland%E7%9A%84external-tool/">&lt;h2 id=&quot;goland的external-tool&quot;&gt;Goland的external tool&lt;/h2&gt;

&lt;p&gt;goland external open in xx 配置&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;

&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;```&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;用zsh&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;下面open&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;参数&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;REPO_ROOT=$(git -C \&quot;$ProjectFileDir$\&quot; rev-parse --show-toplevel); PROJECT=$(basename \&quot;$REPO_ROOT\&quot;); BRANCH=$(git -C \&quot;$REPO_ROOT\&quot; rev-parse --abbrev-ref HEAD); FILE=\&quot;$FilePathRelativeToProjectRoot$\&quot;; LINE=$LineNumber$; URL=\&quot;xxxxxx/$PROJECT/-/blob/$BRANCH/$FILE?ref_type=heads#L$LINE\&quot;; open \&quot;$URL\&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;下面copy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;参数&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;REPO_ROOT=$(git -C \&quot;$ProjectFileDir$\&quot; rev-parse --show-toplevel); PROJECT=$(basename \&quot;$REPO_ROOT\&quot;); BRANCH=$(git -C \&quot;$REPO_ROOT\&quot; rev-parse --abbrev-ref HEAD); FILE=\&quot;$FilePathRelativeToProjectRoot$\&quot;; LINE=$LineNumber$; URL=\&quot;xxxx/$PROJECT/-/blob/$BRANCH/$FILE?ref_type=heads#L$LINE\&quot;; echo \&quot;$URL\&quot; | pbcopy&quot;&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Fulong Ma</name></author><category term="Tools" /><category term="Tools" /><summary type="html">Goland的external tool</summary></entry><entry><title type="html">浦东公租房</title><link href="https://mafulong.github.io/2025/05/15/%E6%B5%A6%E4%B8%9C%E5%85%AC%E7%A7%9F%E6%88%BF/" rel="alternate" type="text/html" title="浦东公租房" /><published>2025-05-15T00:00:00+08:00</published><updated>2025-05-15T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/05/15/%E6%B5%A6%E4%B8%9C%E5%85%AC%E7%A7%9F%E6%88%BF</id><content type="html" xml:base="https://mafulong.github.io/2025/05/15/%E6%B5%A6%E4%B8%9C%E5%85%AC%E7%A7%9F%E6%88%BF/">&lt;h2 id=&quot;公租房&quot;&gt;公租房&lt;/h2&gt;

&lt;p&gt;https://zhuanlan.zhihu.com/p/720027504&lt;/p&gt;

&lt;h2 id=&quot;浦东地图&quot;&gt;浦东地图&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/mafulong/mdPic@vv6/v6/202505152350009.png&quot; alt=&quot;image-20250515235026893&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;房源&quot;&gt;房源&lt;/h2&gt;

&lt;h3 id=&quot;公租房-1&quot;&gt;公租房&lt;/h3&gt;

&lt;h4 id=&quot;仁文公寓&quot;&gt;仁文公寓&lt;/h4&gt;

&lt;p&gt;https://select.pdgzf.com/houseDetails?Id=9765&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3700&lt;/strong&gt;元/月 53平。&lt;/p&gt;

&lt;p&gt;一室一厅，停车300一月。&lt;/p&gt;

&lt;p&gt;靠近二甲 上海明珠医院。&lt;/p&gt;

&lt;p&gt;48分钟，41km， 26分钟。&lt;/p&gt;

&lt;h4 id=&quot;浦三路930弄-艾东苑&quot;&gt;浦三路930弄 艾东苑&lt;/h4&gt;

&lt;p&gt;https://select.pdgzf.com/houseDetails?Id=8613486F-AA0F-4AD6-9BD1-B6D62BCFA29B&lt;/p&gt;

&lt;p&gt;户型： &lt;strong&gt;一室一厅&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;面积： &lt;strong&gt;49.87&lt;/strong&gt; 平方米&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4128&lt;/strong&gt;元/月&lt;/p&gt;

&lt;p&gt;48分钟，44km，17分钟，12km.&lt;/p&gt;

&lt;h4 id=&quot;川和路399弄张江兴科苑&quot;&gt;川和路399弄（张江兴科苑）&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;4081&lt;/strong&gt;元/月&lt;/p&gt;

&lt;p&gt;户型： &lt;strong&gt;一室&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;面积： &lt;strong&gt;47.72&lt;/strong&gt; 平方米&lt;/p&gt;

&lt;p&gt;楼层： 02楼&lt;/p&gt;

&lt;p&gt;房号： 205&lt;/p&gt;

&lt;p&gt;朝向：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;起租日期： 2025-03-16&lt;/li&gt;
  &lt;li&gt;地址： 川和路399弄（张江兴科苑）/11-12号/02楼/205&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;没有车位。&lt;/p&gt;

&lt;p&gt;52分钟，48km， 14分钟，4.5km。&lt;/p&gt;

&lt;h3 id=&quot;公租房三林&quot;&gt;公租房三林&lt;/h3&gt;

&lt;h4 id=&quot;三舒路-城林美苑&quot;&gt;三舒路 城林美苑&lt;/h4&gt;

&lt;p&gt;https://select.pdgzf.com/houseDetails?Id=706833db-607b-4f3c-846b-96f144c516d7&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2850&lt;/strong&gt;元/月&lt;/p&gt;

&lt;p&gt;户型： &lt;strong&gt;二室&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;面积： &lt;strong&gt;67.55&lt;/strong&gt; 平方米&lt;/p&gt;

&lt;p&gt;楼层： 08楼&lt;/p&gt;

&lt;p&gt;房号： 806&lt;/p&gt;

&lt;p&gt;朝向：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;起租日期： 2025-05-22&lt;/li&gt;
  &lt;li&gt;地址： 三舒路33弄（城林美苑）/04号/08楼/806&lt;/li&gt;
  &lt;li&gt;室内配套：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;52 分 ，18km, 32 分钟。&lt;/p&gt;

&lt;h4 id=&quot;永泰路136弄&quot;&gt;永泰路136弄&lt;/h4&gt;

&lt;p&gt;https://select.pdgzf.com/houseDetails?Id=B3EC3477-2161-4A31-8441-ACD494761328&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2963&lt;/strong&gt;元/月&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;已选：2准入资格证202517140007390 （2025-05-19）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;户型： &lt;strong&gt;一室&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;面积： &lt;strong&gt;51.61&lt;/strong&gt; 平方米&lt;/p&gt;

&lt;p&gt;楼层： 02楼&lt;/p&gt;

&lt;p&gt;房号： 203&lt;/p&gt;

&lt;p&gt;朝向：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;起租日期： 2025-05-22&lt;/li&gt;
  &lt;li&gt;地址： 永泰路136弄/33号/2楼/203&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;56mins, 27mins.&lt;/p&gt;

&lt;h4 id=&quot;三旋路506弄绿波家园&quot;&gt;三旋路506弄（绿波家园&lt;/h4&gt;

&lt;p&gt;https://select.pdgzf.com/houseDetails?Id=34BE3519-D644-4915-AC8F-DE4864AF83FB&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2793&lt;/strong&gt;元/月&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;已选：9准入资格证202317140008848 （2023-06-07）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;户型： &lt;strong&gt;二室一厅&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;面积： &lt;strong&gt;64.99&lt;/strong&gt; 平方米&lt;/p&gt;

&lt;p&gt;楼层： 21楼&lt;/p&gt;

&lt;p&gt;房号： 2104&lt;/p&gt;

&lt;p&gt;朝向：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;起租日期： 2025-05-22&lt;/li&gt;
  &lt;li&gt;地址： 三旋路506弄（绿波家园）/19号/21楼/2104&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;52mins, 31mins。&lt;/p&gt;

&lt;h4 id=&quot;杨南路&quot;&gt;杨南路&lt;/h4&gt;

&lt;p&gt;https://select.pdgzf.com/houseDetails?Id=8633&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3365&lt;/strong&gt;元/月&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;已选：2准入资格证202317140018617 （2023-11-30）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;户型： &lt;strong&gt;一室&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;面积： &lt;strong&gt;56.80&lt;/strong&gt; 平方米&lt;/p&gt;

&lt;p&gt;楼层： 02楼&lt;/p&gt;

&lt;p&gt;房号： 202&lt;/p&gt;

&lt;p&gt;朝向：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;起租日期： 2025-05-22&lt;/li&gt;
  &lt;li&gt;地址： 杨南路694弄/81号/2楼/202&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;55mins, 25mins&lt;/p&gt;

&lt;h4 id=&quot;和炯路77弄盛世南苑&quot;&gt;和炯路77弄（盛世南苑）&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;2633&lt;/strong&gt;元/月&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;已选：6准入资格证202317140009994 （2023-06-25）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;户型： &lt;strong&gt;二室一厅&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;面积： &lt;strong&gt;65.26&lt;/strong&gt; 平方米&lt;/p&gt;

&lt;p&gt;楼层： 01楼&lt;/p&gt;

&lt;p&gt;房号： 101&lt;/p&gt;

&lt;p&gt;朝向：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;起租日期： 2025-05-09&lt;/li&gt;
  &lt;li&gt;地址： 和炯路77弄（盛世南苑）/13号/1楼/101&lt;/li&gt;
  &lt;li&gt;室内配套：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;55mins, 32mins&lt;/p&gt;

&lt;h3 id=&quot;非公租房&quot;&gt;非公租房&lt;/h3&gt;

&lt;h4 id=&quot;高科苑&quot;&gt;高科苑&lt;/h4&gt;

&lt;p&gt;高科苑，就在复旦大学和曙光医院旁边，距离中科路不远，这个小区环境不错，可以租一室一厅&lt;/p&gt;

&lt;p&gt;小区没有二房东，是张江高科集团建的对外出租，不存在二房东改造问题&lt;/p&gt;

&lt;p&gt;地下车库地上车库都有，停车费也不贵&lt;/p&gt;

&lt;p&gt;52分钟，50km, 距离公司 3km&lt;/p&gt;

&lt;h4 id=&quot;张江万科翡翠公园&quot;&gt;张江万科翡翠公园&lt;/h4&gt;

&lt;p&gt;53分钟，50km, 14分钟，4.5km。&lt;/p&gt;

&lt;h3 id=&quot;保租房&quot;&gt;保租房&lt;/h3&gt;

&lt;h4 id=&quot;纳仕&quot;&gt;纳仕&lt;/h4&gt;

&lt;p&gt;纳什国际，新的&lt;/p&gt;

&lt;p&gt;贵的不行&lt;/p&gt;</content><author><name>Fulong Ma</name></author><category term="DailyLife" /><category term="DailyLife" /><summary type="html">公租房</summary></entry><entry><title type="html">Spring AOP</title><link href="https://mafulong.github.io/2025/05/06/Spring-AOP/" rel="alternate" type="text/html" title="Spring AOP" /><published>2025-05-06T00:00:00+08:00</published><updated>2025-05-06T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/05/06/Spring%20AOP</id><content type="html" xml:base="https://mafulong.github.io/2025/05/06/Spring-AOP/">&lt;h2 id=&quot;spring-aop&quot;&gt;Spring AOP&lt;/h2&gt;

&lt;h2 id=&quot;谈谈自己对于-aop-的了解&quot;&gt;谈谈自己对于 AOP 的了解&lt;/h2&gt;

&lt;p&gt;AOP，也就是面向切面编程，简单点说，AOP 就是把一些业务逻辑中的相同代码抽取到一个独立的模块中，让业务逻辑更加清爽。&lt;/p&gt;

&lt;p&gt;AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。&lt;/p&gt;

&lt;p&gt;Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 &lt;strong&gt;JDK Proxy&lt;/strong&gt;，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 &lt;strong&gt;Cglib&lt;/strong&gt; 生成一个被代理对象的子类来作为代理&lt;/p&gt;

&lt;p&gt;当然你也可以使用 &lt;strong&gt;AspectJ&lt;/strong&gt; ！Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。&lt;/p&gt;

&lt;p&gt;AOP 切面编程涉及到的一些专业术语：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;术语&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;目标(Target)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;被通知的对象&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;代理(Proxy)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;向目标对象应用通知之后创建的代理对象&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;连接点(JoinPoint)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;目标对象的所属类中，定义的所有方法均为连接点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;切入点(Pointcut)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;被切面拦截 / 增强的连接点（切入点一定是连接点，连接点不一定是切入点）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;通知(Advice)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;增强的逻辑 / 代码，也即拦截到目标对象的连接点之后要做的事情&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;切面(Aspect)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;切入点(Pointcut)+通知(Advice)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Weaving(织入)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;将通知应用到目标对象，进而生成代理对象的过程动作&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Spring&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AOP&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;使用&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AspectJ&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;注解&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;如&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;来声明切面&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;它是单独的aop框架&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;可以在非spring里使用&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;和spring&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aop是两套&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;它是编译时织入&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;使用代理方式实现&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AOP&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;│&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JDK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;动态代理&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;接口型&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;│&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;└──&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CGLIB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;动态代理&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;类型&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;aop-常见的通知类型有哪些&quot;&gt;AOP 常见的通知类型有哪些？&lt;/h2&gt;

&lt;p&gt;AOP 一般有 &lt;strong&gt;5 种&lt;/strong&gt;环绕方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;前置通知 (@Before)&lt;/li&gt;
  &lt;li&gt;返回通知 (@AfterReturning)&lt;/li&gt;
  &lt;li&gt;异常通知 (@AfterThrowing)&lt;/li&gt;
  &lt;li&gt;后置通知 (@After)&lt;/li&gt;
  &lt;li&gt;环绕通知 (@Around)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/mafulong/mdPic@vv6/v6/202505062358585.png&quot; alt=&quot;三分恶面渣逆袭：环绕方式&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;aspectj-是什么&quot;&gt;AspectJ 是什么？&lt;/h2&gt;

&lt;h3 id=&quot;aspectj&quot;&gt;AspectJ&lt;/h3&gt;

&lt;p&gt;AspectJ 是一个 AOP 框架，它可以做很多 Spring AOP 干不了的事情，比如说支持编译时、编译后和类加载时织入切面。并且提供更复杂的切点表达式和通知类型。&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 表示这是一个切面类&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Spring 管理该类的 Bean&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggingAspect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 定义一个切入点，匹配 HelloService 中的所有方法&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Pointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution(* com.example.demo.HelloService.*(..))&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;helloServiceMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 方法执行之前的通知（Before Advice）&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;helloServiceMethods()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logBefore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Method is about to execute&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 方法执行之后的通知（After Advice）&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;helloServiceMethods()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logAfter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Method has executed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;spring-aop-和-aspectj-aop-有什么区别&quot;&gt;Spring AOP 和 AspectJ AOP 有什么区别？&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;特性&lt;/th&gt;
      &lt;th&gt;Spring AOP&lt;/th&gt;
      &lt;th&gt;AspectJ&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;增强方式&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;运行时增强（基于动态代理）&lt;/td&gt;
      &lt;td&gt;编译时增强、类加载时增强（直接操作字节码）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;切入点支持&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;方法级（Spring Bean 范围内，不支持 final 和 staic 方法）&lt;/td&gt;
      &lt;td&gt;方法级、字段、构造器、静态方法等&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;性能&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;运行时依赖代理，有一定开销，切面多时性能较低&lt;/td&gt;
      &lt;td&gt;运行时无代理开销，性能更高&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;复杂性&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;简单，易用，适合大多数场景&lt;/td&gt;
      &lt;td&gt;功能强大，但相对复杂&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Spring 应用下比较简单的 AOP 需求&lt;/td&gt;
      &lt;td&gt;高性能、高复杂度的 AOP 需求&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;如何选择？&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;功能考量&lt;/strong&gt;：AspectJ 支持更复杂的 AOP 场景，Spring AOP 更简单易用。如果你需要增强 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt; 方法、静态方法、字段访问、构造器调用等，或者需要在非 Spring 管理的对象上应用增强逻辑，AspectJ 是唯一的选择。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;性能考量&lt;/strong&gt;：切面数量较少时两者性能差异不大，但切面较多时 AspectJ 性能更优。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;一句话总结&lt;/strong&gt;：简单场景优先使用 Spring AOP；复杂场景或高性能需求时，选择 AspectJ。&lt;/p&gt;

&lt;p&gt;Spring AOP 属于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;运行时增强&lt;/code&gt;，主要具有如下特点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;基于动态代理来实现，默认如果使用接口的，用 JDK 提供的动态代理实现，如果是方法则使用 CGLIB 实现&lt;/li&gt;
  &lt;li&gt;Spring AOP 需要依赖 IoC 容器来管理，并且只能作用于 Spring 容器，使用纯 Java 代码实现&lt;/li&gt;
  &lt;li&gt;在性能上，由于 Spring AOP 是基于&lt;strong&gt;动态代理&lt;/strong&gt;来实现的，在容器启动时需要生成代理实例，在方法调用上也会增加栈的深度，使得 Spring AOP 的性能不如 AspectJ 的那么好。&lt;/li&gt;
  &lt;li&gt;Spring AOP 致力于解决企业级开发中最普遍的 AOP(方法织入)。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;AspectJ 是一个易用的功能强大的 AOP 框架，属于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;编译时增强&lt;/code&gt;， 可以单独使用，也可以整合到其它框架中，是 AOP 编程的完全解决方案。AspectJ 需要用到单独的编译器 ajc。&lt;/p&gt;

&lt;p&gt;AspectJ 属于&lt;strong&gt;静态织入&lt;/strong&gt;，通过修改代码来实现，在实际运行之前就完成了织入，所以说它生成的类是没有额外运行时开销的，一般有如下几个织入的时机：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;编译期织入（Compile-time weaving）：如类 A 使用 AspectJ 添加了一个属性，类 B 引用了它，这个场景就需要编译期的时候就进行织入，否则没法编译类 B。&lt;/li&gt;
  &lt;li&gt;编译后织入（Post-compile weaving）：也就是已经生成了 .class 文件，或已经打成 jar 包了，这种情况我们需要增强处理的话，就要用到编译后织入。&lt;/li&gt;
  &lt;li&gt;类加载后织入（Load-time weaving）：指的是在加载类的时候进行织入，要实现这个时期的织入，有几种常见的方法&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;sprint-aop&quot;&gt;Sprint AOP&lt;/h2&gt;

&lt;h3 id=&quot;spring-aop-发生在什么时候&quot;&gt;Spring AOP 发生在什么时候？&lt;/h3&gt;

&lt;p&gt;Spring AOP 基于运行时代理机制，这意味着 Spring AOP 是在运行时通过动态代理生成的，而不是在编译时或类加载时生成的。&lt;/p&gt;

&lt;p&gt;在 Spring 容器初始化 Bean 的过程中，Spring AOP 会检查 Bean 是否需要应用切面。如果需要，Spring 会为该 Bean 创建一个代理对象，并在代理对象中织入切面逻辑。这一过程发生在 Spring 容器的后处理器（BeanPostProcessor）阶段。&lt;/p&gt;

&lt;h3 id=&quot;说说-jdk-动态代理和-cglib-代理&quot;&gt;说说 JDK 动态代理和 CGLIB 代理？&lt;/h3&gt;

&lt;p&gt;AOP 是通过&lt;a href=&quot;https://mp.weixin.qq.com/s/aZtfwik0weJN5JzYc-JxYg&quot;&gt;动态代理&lt;/a&gt;实现的，代理方式有两种：JDK 动态代理和 CGLIB 代理。&lt;/p&gt;

&lt;p&gt;①、JDK 动态代理是基于接口的代理，只能代理实现了接口的类。&lt;/p&gt;

&lt;p&gt;使用 JDK 动态代理时，Spring AOP 会创建一个代理对象，该代理对象实现了目标对象所实现的接口，并在方法调用前后插入横切逻辑。&lt;/p&gt;

&lt;p&gt;优点：只需依赖 JDK 自带的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.lang.reflect.Proxy&lt;/code&gt; 类，不需要额外的库；缺点：只能代理接口，不能代理类本身。&lt;/p&gt;

&lt;p&gt;②、CGLIB 动态代理是基于继承的代理，可以代理没有实现接口的类。&lt;/p&gt;

&lt;p&gt;使用 CGLIB 动态代理时，Spring AOP 会生成目标类的子类，并在方法调用前后插入横切逻辑。&lt;/p&gt;

&lt;p&gt;优点：可以代理没有实现接口的类，灵活性更高；缺点：需要依赖 CGLIB 库，创建代理对象的开销相对较大。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JDK 动态代理&lt;/strong&gt;只能代理实现了接口的类。它的实现基于 Java 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.lang.reflect.Proxy&lt;/code&gt; 类和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InvocationHandler&lt;/code&gt; 接口，&lt;strong&gt;运行时在内存中动态生成代理类的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.class&lt;/code&gt; 文件并加载执行&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;JDK Proxy 是通过在内存中动态创建一个实现了同样接口的代理类来“代理”目标对象的方法调用。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;比较维度&lt;/th&gt;
      &lt;th&gt;JDK 动态代理&lt;/th&gt;
      &lt;th&gt;CGLIB 动态代理&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;代理对象&lt;/td&gt;
      &lt;td&gt;必须实现接口&lt;/td&gt;
      &lt;td&gt;不需要接口&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;实现方式&lt;/td&gt;
      &lt;td&gt;JDK Proxy + 反射&lt;/td&gt;
      &lt;td&gt;继承 + 字节码增强&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;性能（早期）&lt;/td&gt;
      &lt;td&gt;较低&lt;/td&gt;
      &lt;td&gt;较高&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;限制&lt;/td&gt;
      &lt;td&gt;不能代理类本身&lt;/td&gt;
      &lt;td&gt;不能代理 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt; 类/方法&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring 默认策略&lt;/td&gt;
      &lt;td&gt;有接口：JDK 动态代理无接口：CGLIB&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;选择-cglib-还是-jdk-动态代理&quot;&gt;选择 CGLIB 还是 JDK 动态代理？&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;如果目标对象没有实现任何接口，则只能使用 CGLIB 代理。如果目标对象实现了接口，通常首选 JDK 动态代理。&lt;/li&gt;
  &lt;li&gt;虽然 CGLIB 在代理类的生成过程中可能消耗更多资源，但在运行时具有较高的性能。对于性能敏感且代理对象创建频率不高的场景，可以考虑使用 CGLIB。&lt;/li&gt;
  &lt;li&gt;JDK 动态代理是 Java 原生支持的，不需要额外引入库。而 CGLIB 需要将 CGLIB 库作为依赖加入项目中。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Fulong Ma</name></author><category term="Spring" /><category term="Spring" /><summary type="html">Spring AOP</summary></entry><entry><title type="html">Spring IoC</title><link href="https://mafulong.github.io/2025/05/06/Spring-IoC/" rel="alternate" type="text/html" title="Spring IoC" /><published>2025-05-06T00:00:00+08:00</published><updated>2025-05-06T00:00:00+08:00</updated><id>https://mafulong.github.io/2025/05/06/Spring%20IoC</id><content type="html" xml:base="https://mafulong.github.io/2025/05/06/Spring-IoC/">&lt;h2 id=&quot;sprint-ioc&quot;&gt;Sprint IoC&lt;/h2&gt;

&lt;h3 id=&quot;谈谈自己对于-spring-ioc-的了解&quot;&gt;谈谈自己对于 Spring IoC 的了解&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;IoC（Inversion of Control:控制反转）&lt;/strong&gt; 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;为什么叫控制反转？&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;控制&lt;/strong&gt;：指的是对象创建（实例化、管理）的权力&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;反转&lt;/strong&gt;：控制权交给外部环境（Spring 框架、IoC 容器）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在实际项目中一个 Service 类可能依赖了很多其他的类，假如我们需要实例化这个 Service，你可能要每次都要搞清这个 Service 所有底层类的构造函数，这可能会把人逼疯。如果利用 IoC 的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。&lt;/p&gt;

&lt;p&gt;在 Spring 中， IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个 Map（key，value），Map 中存放的是各种对象。&lt;/p&gt;

&lt;p&gt;IOC 是一种思想，&lt;strong&gt;DI&lt;/strong&gt; 是实现 IOC 的具体方式，比如说利用注入机制（如构造器注入、Setter 注入）将依赖传递给目标对象。&lt;/p&gt;

&lt;h3 id=&quot;将一个类声明为-bean-的注解有哪些&quot;&gt;将一个类声明为 Bean 的注解有哪些?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Component&lt;/code&gt;：通用的注解，可标注任意类为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spring&lt;/code&gt; 组件。如果一个 Bean 不知道属于哪个层，可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Component&lt;/code&gt; 注解标注。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Repository&lt;/code&gt; : 对应持久层即 Dao 层，主要用于数据库相关操作。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Service&lt;/code&gt; : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Controller&lt;/code&gt; : 对应 Spring MVC 控制层，主要用于接受用户请求并调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Service&lt;/code&gt; 层返回数据给前端页面。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;component-和-bean-的区别是什么&quot;&gt;@Component 和 @Bean 的区别是什么？&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Component&lt;/code&gt; 注解作用于类，而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt;注解作用于方法。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Component&lt;/code&gt;通常是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中（我们可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ComponentScan&lt;/code&gt; 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中）。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt; 注解通常是我们在标有该注解的方法中定义产生这个 bean,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt;告诉了 Spring 这是某个类的实例，当我需要用它的时候还给我。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt; 注解比 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Component&lt;/code&gt; 注解的自定义性更强，而且很多地方我们只能通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt; 注解来注册 bean。比如当我们引用第三方库中的类需要装配到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spring&lt;/code&gt;容器时，则只能通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt;来实现。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransferService&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transferService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransferServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;注入-bean-的注解有哪些&quot;&gt;注入 Bean 的注解有哪些？&lt;/h3&gt;

&lt;p&gt;Spring 内置的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; 以及 JDK 内置的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Resource&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Inject&lt;/code&gt; 都可以用于注入 Bean。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Annotation&lt;/th&gt;
      &lt;th&gt;Package&lt;/th&gt;
      &lt;th&gt;Source&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org.springframework.bean.factory&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Spring 2.5+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Resource&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javax.annotation&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Java JSR-250&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Inject&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javax.inject&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Java JSR-330&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; 和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Resource&lt;/code&gt;使用的比较多一些。&lt;/p&gt;

&lt;p&gt;推荐构造函数注入。&lt;/p&gt;

&lt;h3 id=&quot;autowired-和-resource-的区别是什么&quot;&gt;@Autowired 和 @Resource 的区别是什么？&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; 是 Spring 提供的注解，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Resource&lt;/code&gt; 是 JDK 提供的注解。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Autowired&lt;/code&gt; 默认的注入方式为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;byType&lt;/code&gt;（根据类型进行匹配），&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Resource&lt;/code&gt;默认注入方式为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;byName&lt;/code&gt;（根据名称进行匹配）。&lt;/li&gt;
  &lt;li&gt;当一个接口存在多个实现类的情况下，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; 和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Resource&lt;/code&gt;都需要通过名称才能正确匹配到对应的 Bean。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Autowired&lt;/code&gt; 可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Qualifier&lt;/code&gt; 注解来显式指定名称，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Resource&lt;/code&gt;可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; 属性来显式指定名称。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; 支持在构造函数、方法、字段和参数上使用。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Resource&lt;/code&gt; 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;注入-bean-的方式有哪些&quot;&gt;注入 Bean 的方式有哪些？&lt;/h3&gt;

&lt;p&gt;依赖注入 (Dependency Injection, DI) 的常见方式：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;构造函数注入：通过类的构造函数来注入依赖项。&lt;/li&gt;
  &lt;li&gt;Setter 注入：通过类的 Setter 方法来注入依赖项。&lt;/li&gt;
  &lt;li&gt;Field（字段） 注入：直接在类的字段上使用注解（如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Resource&lt;/code&gt;）来注入依赖项。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Spring 官方推荐构造函数注入&lt;/strong&gt;，这种注入方式的优势如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;依赖完整性：确保所有必需依赖在对象创建时就被注入，避免了空指针异常的风险。&lt;/li&gt;
  &lt;li&gt;不可变性：有助于创建不可变对象，提高了线程安全性。&lt;/li&gt;
  &lt;li&gt;初始化保证：组件在使用前已完全初始化，减少了潜在的错误。&lt;/li&gt;
  &lt;li&gt;测试便利性：在单元测试中，可以直接通过构造函数传入模拟的依赖项，而不必依赖 Spring 容器进行注入。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;构造函数注入适合处理&lt;strong&gt;必需的依赖项&lt;/strong&gt;，而 &lt;strong&gt;Setter 注入&lt;/strong&gt; 则更适合&lt;strong&gt;可选的依赖项&lt;/strong&gt;，这些依赖项可以有默认值或在对象生命周期中动态设置。虽然 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; 可以用于 Setter 方法来处理必需的依赖项，但构造函数注入仍然是更好的选择。&lt;/p&gt;

&lt;p&gt;在某些情况下（例如第三方类不提供 Setter 方法），构造函数注入可能是&lt;strong&gt;唯一的选择&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;bean-的作用域有哪些&quot;&gt;Bean 的作用域有哪些?&lt;/h3&gt;

&lt;p&gt;Spring 中 Bean 的作用域通常有下面几种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;singleton&lt;/strong&gt; : IoC 容器中只有唯一的 bean 实例。Spring 中的 bean 默认都是单例的，是对单例设计模式的应用。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;prototype&lt;/strong&gt; : 每次获取都会创建一个新的 bean 实例。也就是说，连续 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getBean()&lt;/code&gt; 两次，得到的是不同的 Bean 实例。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;request&lt;/strong&gt; （仅 Web 应用可用）: 每一次 HTTP 请求都会产生一个新的 bean（请求 bean），该 bean 仅在当前 HTTP request 内有效。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;session&lt;/strong&gt; （仅 Web 应用可用） : 每一次来自新 session 的 HTTP 请求都会产生一个新的 bean（会话 bean），该 bean 仅在当前 HTTP session 内有效。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;application/global-session&lt;/strong&gt; （仅 Web 应用可用）：每个 Web 应用在启动时创建一个 Bean（应用 Bean），该 bean 仅在当前应用启动时间内有效。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;websocket&lt;/strong&gt; （仅 Web 应用可用）：每一次 WebSocket 会话产生一个新的 bean。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bean-的生命周期了解么&quot;&gt;Bean 的生命周期了解么?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;创建 Bean 的实例&lt;/strong&gt;：Bean 容器首先会找到配置文件中的 Bean 定义，然后使用 Java 反射 API 来创建 Bean 的实例。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bean 属性赋值/填充&lt;/strong&gt;：为 Bean 设置相关属性和依赖，例如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; 等注解注入的对象、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Value&lt;/code&gt; 注入的值、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setter&lt;/code&gt;方法或构造函数注入依赖和值、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Resource&lt;/code&gt;注入的各种资源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bean 初始化&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;如果 Bean 实现了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanNameAware&lt;/code&gt; 接口，调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setBeanName()&lt;/code&gt;方法，传入 Bean 的名字。
     - 如果 Bean 实现了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanClassLoaderAware&lt;/code&gt; 接口，调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setBeanClassLoader()&lt;/code&gt;方法，传入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassLoader&lt;/code&gt;对象的实例。&lt;/li&gt;
      &lt;li&gt;如果 Bean 实现了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanFactoryAware&lt;/code&gt; 接口，调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setBeanFactory()&lt;/code&gt;方法，传入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt;对象的实例。&lt;/li&gt;
      &lt;li&gt;与上面的类似，如果实现了其他 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.Aware&lt;/code&gt;接口，就调用相应的方法。&lt;/li&gt;
      &lt;li&gt;如果有和加载这个 Bean 的 Spring 容器相关的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanPostProcessor&lt;/code&gt; 对象，执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postProcessBeforeInitialization()&lt;/code&gt; 方法&lt;/li&gt;
      &lt;li&gt;如果 Bean 实现了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InitializingBean&lt;/code&gt;接口，执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;afterPropertiesSet()&lt;/code&gt;方法。&lt;/li&gt;
      &lt;li&gt;如果 Bean 在配置文件中的定义包含 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init-method&lt;/code&gt; 属性，执行指定的方法。&lt;/li&gt;
      &lt;li&gt;如果有和加载这个 Bean 的 Spring 容器相关的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanPostProcessor&lt;/code&gt; 对象，执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postProcessAfterInitialization()&lt;/code&gt; 方法。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;销毁 Bean&lt;/p&gt;

    &lt;p&gt;：销毁并不是说要立马把 Bean 给销毁掉，而是把 Bean 的销毁方法先记录下来，将来需要销毁 Bean 或者销毁容器的时候，就调用这些方法去释放 Bean 所持有的资源。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;如果 Bean 实现了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DisposableBean&lt;/code&gt; 接口，执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destroy()&lt;/code&gt; 方法。&lt;/li&gt;
      &lt;li&gt;如果 Bean 在配置文件中的定义包含 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destroy-method&lt;/code&gt; 属性，执行指定的 Bean 销毁方法。或者，也可以直接通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@PreDestroy&lt;/code&gt; 注解标记 Bean 销毁之前执行的方法。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bean 的生命周期大致分为五个阶段：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/mafulong/mdPic@vv6/v6/202505062341884.png&quot; alt=&quot;三分恶面渣逆袭：Bean生命周期五个阶段&quot; /&gt;三分恶面渣逆袭：Bean生命周期五个阶段&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;实例化&lt;/strong&gt;：Spring 首先使用构造方法或者工厂方法创建一个 Bean 的实例。在这个阶段，Bean 只是一个空的 Java 对象，还未设置任何属性。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;属性赋值&lt;/strong&gt;：Spring 将配置文件中的属性值或依赖的 Bean 注入到该 Bean 中。这个过程称为依赖注入，确保 Bean 所需的所有依赖都被注入。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;初始化&lt;/strong&gt;：Spring 调用 afterPropertiesSet 方法，或通过配置文件指定的 init-method 方法，完成初始化。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;使用中&lt;/strong&gt;：Bean 准备好可以使用了。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;销毁&lt;/strong&gt;：在容器关闭时，Spring 会调用 destroy 方法，完成 Bean 的清理工作。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;如何记忆呢？&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;整体上可以简单分为四步：实例化 —&amp;gt; 属性赋值 —&amp;gt; 初始化 —&amp;gt; 销毁。&lt;/li&gt;
  &lt;li&gt;初始化这一步涉及到的步骤比较多，包含 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Aware&lt;/code&gt; 接口的依赖注入、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanPostProcessor&lt;/code&gt; 在初始化前后的处理以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InitializingBean&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init-method&lt;/code&gt; 的初始化操作。&lt;/li&gt;
  &lt;li&gt;销毁这一步会注册相关销毁回调接口，最后通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DisposableBean&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destory-method&lt;/code&gt; 进行销毁。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最后，再分享一张清晰的图解（图源：&lt;a href=&quot;https://chaycao.github.io/2020/02/15/如何记忆Spring-Bean的生命周期.html&quot;&gt;如何记忆 Spring Bean 的生命周期&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/mafulong/mdPic@vv6/v6/202505062339187.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;spring-中的单例-bean-会存在线程安全问题吗&quot;&gt;Spring 中的单例 Bean 会存在线程安全问题吗？&lt;/h3&gt;

&lt;p&gt;Spring Bean 的默认作用域是单例（Singleton），这意味着 Spring 容器中只会存在一个 Bean 实例，并且该实例会被多个线程共享。&lt;/p&gt;

&lt;p&gt;如果单例 Bean 是无状态的，也就是没有成员变量，那么这个单例 Bean 是线程安全的。比如 Spring MVC 中的 Controller、Service、Dao 等，基本上都是无状态的。&lt;/p&gt;

&lt;p&gt;但如果 Bean 的内部状态是可变的，且没有进行适当的同步处理，就可能出现线程安全问题。&lt;/p&gt;

&lt;p&gt;对于有状态单例 Bean 的线程安全问题，常见的三种解决办法是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;避免可变成员变量&lt;/strong&gt;: 尽量设计 Bean 为无状态。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ThreadLocal&lt;/code&gt;&lt;/strong&gt;: 将可变成员变量保存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ThreadLocal&lt;/code&gt; 中，确保线程独立。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;使用同步机制&lt;/strong&gt;: 利用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReentrantLock&lt;/code&gt; 来进行同步控制，确保线程安全。&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Fulong Ma</name></author><category term="Spring" /><category term="Spring" /><summary type="html">Sprint IoC</summary></entry></feed>